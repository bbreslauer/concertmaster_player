// config

notinit = false;

global = Object ();
global.compbase = Array ();

localStorage.spapitokents = 0;

if (localStorage.confighistorical == undefined)
{
    localStorage.confighistorical = false;
}

if (localStorage.configcompilations == undefined)
{
    localStorage.configcompilations = false;
}

if (localStorage.smartradio == undefined)
{
    localStorage.smartradio = false;
}

if (localStorage.uuid == undefined)
{
    localStorage.uuid = uuid ();
}

global.options = {
    debug: false,
    superdebug: true,
    historical: JSON.parse(localStorage.confighistorical),
    compilations: JSON.parse(localStorage.configcompilations),
    timeout: 10000,
    backendhost: 'api2.getconcertmaster.com',
    backend: 'http://api2.getconcertmaster.com',
    publicsite: 'http://getconcertmaster.com',
    shareurl: 'http://cmas.me',
    forbiddenlabels:
        ['Classical Archives','Music@Menlo LIVE','Amadis','Yoyo USA','Classico','CD Accord','Vista Vera','CMS Live','Summit Records'],
    historicallabels:
        ['British Music Society','SOMM Recordings','West Hill Radio Archives','Music and Arts Programs of America','IDIS','Audite','Archiphon','Fono','Pierian Recording Society'],
    smartradio: JSON.parse(localStorage.smartradio),
    notshow: false
};

const mongo = require('mongodb').MongoClient;
const assert = require('assert');

global.concertmasterstatus = {};
global.concertmasterstatus.radioworks = Array ();
global.playerinfo = {};
global.workinfo = {};

// biblioteca

global.windowcontrol = function (action)
{
    win = remote.getCurrentWindow();

    if (action == 'close')
    {
        win.show();
        $("#close-confirm").leanModal();
    }
    else if (action == 'min')
    {
        win.hide();
    }
    else if (action == 'max')
    {
        if (win.isMaximized())
        {
		      win.unmaximize();
        }
        else
        {
          win.maximize();
        }
    }
    else if (action == 'fullscreen')
    {
        $('#fullscreen').toggleClass('on');
        win.setFullScreen($('#fullscreen').hasClass('on'));
    }
    else if (action == 'quit')
    {
        win.close();
    }
    else if (action == 'show')
    {
        win.show();
    }
}

global.debug = function (output)
{
  if (global.options.debug) { console.log (output); }
}

global.superdebug = function (output)
{
  var data = new Date();
  var str_data = data.getDate() + '/' + (data.getMonth()+1) + '/' + data.getFullYear();
  var str_hora = data.getHours() + ':' + data.getMinutes() + ':' + data.getSeconds();
  if (global.options.superdebug) { console.log (str_data + ' ' + str_hora + ' - ' + output); }
}

spotinit = function ()
{
  global.debug (Date.now() - global.concertmasterstatus.lastspotistatus);
  global.debug (global.concertmasterstatus.spotifyclient);

  if (global.concertmasterstatus.lastspotistatus == undefined || (Date.now() - global.concertmasterstatus.lastspotistatus > 60000))
  {
      if (global.concertmasterstatus.failedinit && global.concertmasterstatus.spotifyclient == true)
      {
        global.concertmasterstatus.spotifyclient = false;

        if (global.concertmasterstatus.usingplayer == "spotify" && $('#playpause').hasClass("pause"))
        {
          // achar outro jeito de descobrir se estava rodando

          global.spotifyerror ();
          global.debug ("parei no 418 porque estava tocando quando perdeu a conexao");
          global.stop ();
        }
      }
      /* src: 'https://embed.spotify.com/?uri=spotify:trackset:Concertmaster:0QvPZwLHp8k2WWn5YJKAX9', */

      global.debug ('rodei');
      var ifr=$('<iframe/>', {
      id:'spotiplayeriframe',
      src: 'spotify.html',
      style:'display:none; width:0px; height:0px',
      load: function()
            {
                window.frames["spotiplayeriframe"].contentWindow.spotoken = global.concertmasterstatus.spotoken;
                window.frames["spotiplayeriframe"].contentWindow.SPR.addPlayModeChangedListener(spotistatus);
            }
      });
      request({headers: {'Origin': 'https://open.spotify.com', 'Referer': 'https://open.spotify.com', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36'}, url: 'https://open.spotify.com/token', json: true, timeout: global.options.timeout}, function (error, response, body)
      {
        global.concertmasterstatus.spotoken = body.t;
        $('#spotiplayer').html(ifr);
      });

      if (global.concertmasterstatus.spotinitimer == undefined)
      {
        global.concertmasterstatus.spotinitimer = setInterval(spotinit, 20000);
      }

      if (global.concertmasterstatus.spotifyclienttimer == undefined)
      {
        global.concertmasterstatus.spotifyclienttimer = setInterval(spotifyclient, 1000);
      }

      global.concertmasterstatus.failedinit = true;
  }
}

spotistatus = function (arg)
{
  //console.log (arg);
  global.concertmasterstatus.spotifyclient = true;
  //$('#spotifyerror').closeModal();
  global.concertmasterstatus.failedinit = false;

  if (global.concertmasterstatus.usingplayer == "spotify")
  {
    global.debug (JSON.stringify(arg));

    if (arg.status)
    {
      global.concertmasterstatus.spotippos = arg.playing_position;
      global.concertmasterstatus.spotilen = arg.track.length;

      oldindex = global.concertmasterstatus.trindex;
      global.concertmasterstatus.trindex = global.concertmasterstatus.trids.indexOf(arg.track.track_resource.uri.split(":")[2]);

      if (global.concertmasterstatus.trindex != -1)
      {
        global.concertmasterstatus.stopped = false;

        $('#playpause').removeClass("play");
        $('#playpause').addClass("pause");

        if (process.platform == 'darwin')
        {
          global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_pause@2x.png'));
        }
        else
        {
          global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_pause.png'));
        }
      }
      else
      {
        global.concertmasterstatus.stopped = true;

        $('#playpause').removeClass("pause");
        $('#playpause').addClass("play");

        if (process.platform == 'darwin')
        {
          global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play@2x.png'));
        }
        else
        {
          global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play.png'));
        }


      }

      /*if (global.concertmasterstatus.spotitimer)
      {
        clearInterval (global.concertmasterstatus.spotitimer);
      }*/

      if (arg.playing_position != 0) { global.slider ([arg.playing_position, arg.track.length]); }

      if (oldindex != global.concertmasterstatus.trindex)
      {
        /* mudou de faixa */

        $("#timer-"+oldindex).html(global.readabletime(0));
        $("#globaltimer-"+oldindex).html(global.readabletime(0));
        $("#slider-"+oldindex).find('.bar').css('width', '0%');
        $("#globalslider-"+oldindex).find('.bar').css('width', '0%');
      }

      if ((global.concertmasterstatus.stopped != true) && (global.concertmasterstatus.trindex == eval(global.concertmasterstatus.tracks)-1) && (arg.playing_position*1000 >= (eval(arg.track.length)-1)*1000))
      {
          if (global.concertmasterstatus.spotitimer)
          {
            clearInterval (global.concertmasterstatus.spotitimer);
          }

          $("#timer-"+global.concertmasterstatus.trindex).html(global.readabletime(0));
          $("#globaltimer-"+global.concertmasterstatus.trindex).html(global.readabletime(0));
          $("#slider-"+global.concertmasterstatus.trindex).find('.bar').css('width', '0%');
          $("#globalslider-"+global.concertmasterstatus.trindex).find('.bar').css('width', '0%');

          /* acabou a obra */

          global.debug ("acabou na 233: tocando, ultima faixa do set e vem status ~1 seg antes ou depois do final da faixa");

          $(".timer").html('0:00');
          $("#timerglobal").html('0:00');
          global.concertmasterstatus.stopped = true;
          $('#playpause').toggleClass("play");
          $('#playpause').toggleClass("pause");

          global.traymenu.items[2].label = "Play";

          if (process.platform == 'darwin')
          {
            global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play@2x.png'));
          }
          else
          {
            global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play.png'));
          }

          if (global.concertmasterstatus.radio)
          {
              // global.superdebug ("RADIO - chamando o radio - 179 - spotify terminou a faixa");
              global.radio (0);
          }
      }
      else
      //if (arg.playing_position != 0)
      {
        if (global.concertmasterstatus.spotitimer)
        {
          clearInterval (global.concertmasterstatus.spotitimer);
        }
        global.concertmasterstatus.spotitimer = setInterval(global.autoslider, 1000);
      }
    }
    else if (typeof arg.playing_position == "undefined")
    {
      global.spotifyerror ();

      if (global.concertmasterstatus.spotitimer)
      {
        clearInterval (global.concertmasterstatus.spotitimer);
      }

      $('#playpause').removeClass("pause");
      $('#playpause').addClass("play");

      if (process.platform == 'darwin')
      {
        global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play@2x.png'));
      }
      else
      {
        global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play.png'));
      }
    }
    else
    {
      //global.conc.trigger('change.select2')erstatus.stopped = true;

      global.concertmasterstatus.trindex = global.concertmasterstatus.trids.indexOf(arg.track.track_resource.uri.split(":")[2]);

      if (global.concertmasterstatus.trindex != -1)
      {
        global.debug ("o spotify client parou de tocar a faixa atual");

        /* parado, mas no album atual */

        global.concertmasterstatus.spotippos = arg.playing_position;
        global.concertmasterstatus.spotilen = arg.track.length;
        global.concertmasterstatus.stopped = false;

        if (arg.playing_position != 0) { global.slider ([arg.playing_position, arg.track.length]); }
      //

        if (global.concertmasterstatus.spotitimer)
        {
          clearInterval (global.concertmasterstatus.spotitimer);
        }

        $('#playpause').removeClass("pause");
        $('#playpause').addClass("play");

        if (process.platform == 'darwin')
        {
          global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play@2x.png'));
        }
        else
        {
          global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play.png'));
        }

        if ((global.concertmasterstatus.trindex == eval(global.concertmasterstatus.tracks)-1 || global.concertmasterstatus.trindex == 0) && global.concertmasterstatus.currentpoint > 0 && arg.playing_position == 0)
        {
          $(".slider").find('.bar').css('width', '0%');
          $(".slider").find('.buffer').css('width', '0%');
          $(".timer").html('0:00');
          $("#timerglobal").html('0:00');
          global.concertmasterstatus.stopped = true;

          // e a pausa?
          global.debug ("terminou no 297: veio status negativo, posicao eh zero, eh ultima ou primeira faixa e ja tinha rodado alguma musica antes");

          if (global.concertmasterstatus.radio)
          {
            // global.superdebug ("RADIO - terminou no 297: veio status negativo, posicao eh zero, eh ultima ou primeira faixa e ja tinha rodado alguma musica antes");
            global.radio (0);
          }
        }
        else if (((global.concertmasterstatus.trindex == eval(global.concertmasterstatus.tracks)-1 || global.concertmasterstatus.trindex == 0) && global.concertmasterstatus.currentpoint == 0 && arg.playing_position == 0 && global.concertmasterstatus.radio))
        {
          global.debug ("era pra ter tocado automaticamente, via radio, mas o spotify veio pausado");
          global.playpause ();
        }
      }

      /*if (global.concertmasterstatus.radio && global.concertmasterstatus.stopped == true)
      {
          global.debug ("index - chamando o radio - 290 - spotify terminou a faixa mas tocou propaganda");
          global.radio();
      }*/
    }
  }

    global.concertmasterstatus.lastspotistatus = Date.now();
}

spotifyclient = function ()
{
    if (global.concertmasterstatus.spotifyclient == true)
    {
      $('#spotifystatus #spoticon').removeClass("off");
      $('#spotifystatus #spoticon').addClass("on");
      $('#spotifystatus #spotlegend').html("Spotify is running and working");
    }
    else
    {
      $('#spotifystatus #spoticon').removeClass("on");
      $('#spotifystatus #spoticon').addClass("off");
      $('#spotifystatus #spotlegend').html("Spotify is not running or unresponsive");
    }
}

// banco de dados

var request=require('request');
var Step=require('step');
var fs = require('fs');
var archiver = require('archiver');
var DecompressZip = require('decompress-zip');
var http = require ("http");
var statusBar = require ("status-bar");

Datastore = require('nedb'),
    path = require('path'),
    global.db = {};

global.db.works = new Datastore({ filename: path.join(remote.app.getPath('userData'), 'composers.db'), autoload: true });
global.db.recordings = new Datastore({ filename: path.join(remote.app.getPath('userData'), 'recordings.db'), autoload: true });
global.db.albums = new Datastore({ filename: path.join(remote.app.getPath('userData'), 'albums.db'), autoload: true });
global.db.stats = new Datastore({ filename: path.join(remote.app.getPath('userData'), 'stats.db'), autoload: true });
global.db.spotify = new Datastore({ filename: path.join(remote.app.getPath('userData'), 'spotify.db'), autoload: true });

var db = global.db;

fs.exists (path.join(remote.app.getPath('userData'), 'img'), function (exists)
{
  if (!exists)
  {
    fs.mkdir(path.join(remote.app.getPath('userData'), 'img'));
  }
});

global.composers = function (letter, psearch)
{
    compcontent = '';

    if (letter != 'all' && letter != '' && letter != 'fav')
    {
        if (psearch)
        {
            if (psearch == 'period')
            {
                search = { composer_period: letter };
                compcontent = '<li class="index period"></li>';
                $('#library #composersearch').val('');
            }
            else
            {
                var letreg = new RegExp(letter, 'i');
                search = { composer_fullname: { $regex: letreg } };
                compcontent = '<li class="index search"></li>';
                $('#library select.periods').val('all');
                $('#library select.periods').trigger('change.select2');
            }
        }
        else
        {
            var letreg = new RegExp('^'+letter, 'i');
            search = { composer_name: { $regex: letreg } };
            compcontent = '<li class="index">'+letter+'</li>';
            $('#library #composersearch').val('');
            $('#library select.periods').val('all');
            $('#library select.periods').trigger('change.select2');
        }
    }
    else if (letter == 'fav')
    {
        search = { composer_favorite: true };
        compcontent = '<li class="index favorite"></li>';
        $('#library #composersearch').val('');
        $('#library select.periods').val('all');
        $('#library select.periods').trigger('change.select2');
    }
    else
    {
        search = { composer_name: { $exists: true } };
        compcontent = '<li class="index all"></li>';
        $('#library #composersearch').val('');
        $('#library select.periods').val('all');
        $('#library select.periods').trigger('change.select2');
    }

    db.works.find(search).sort({ composer_name: 1 }).exec (function (err, docs)
    {
        $('#composers').html(compcontent);

        /*global.debug (letter);
        global.debug (psearch);
        global.debug (docs.length);*/

        if (letter == 'all' && !psearch && docs.length == 0)
        {
            setTimeout (global.installversion,1000);
            //global.initdb ('install', sessionStorage.latestlibrary);
            //alert (sessionStorage.latestlibrary);
        }
        else if (letter == 'all')
        {
            setTimeout (global.checkversion,5000);
        }

        for (composer in docs)
        {
            cfav = '';
            cforb = '';

            global.compbase[docs[composer].composer_id] = docs[composer].composer_name;

            if (docs[composer].composer_favorite)
            {
              cfav = 'favorite';
            }

            if (docs[composer].composer_forbidden)
            {
              cforb = 'forbidden';
            }

            $('#composers').append('<li class="composer"><ul class="composerdetails"><li class="photo"><a href="javascript:global.genres(\''+docs[composer].composer_id+'\', \''+docs[composer].composer_name.replace(/\'/g,"\\\'")+'\');"><img src="img/portraits/'+docs[composer].composer_id+'.jpg" /></a></li><li class="name"><a href="javascript:global.genres(\''+docs[composer].composer_id+'\', \''+docs[composer].composer_name.replace(/\'/g,"\\\'")+'\');">'+docs[composer].composer_name+'</a></li><li class="fullname">'+docs[composer].composer_fullname+'</li><li class="dates">('+docs[composer].composer_yearborn+'-'+docs[composer].composer_yeardeath+')</li><li class="forb_'+docs[composer].composer_id+' forb '+cforb+'"><a href="javascript:global.forbiddencomposer(\''+docs[composer].composer_id+'\');">forbidden</a></li><li class="cfav_'+docs[composer].composer_id+' fav '+cfav+'"><a href="javascript:global.favoritecomposer(\''+docs[composer].composer_id+'\');">fav</a></li><li class="radio"><a href="javascript:global.radio(0,\''+docs[composer].composer_id+'\',\'All\',\'All\',false,\'\',false);">radio</a></li></ul></li>');
        }

        $('#composers').scrollLeft(0);
    });
}

global.concertmasterstatus.radiotentativas = 0;
global.concertmasterstatus.supertentativas = 0;

global.albumlist = function (processid, wid, radio, fav, workname, perfid, composernameparam, playlist_slug, seqplay, history)
{
    //console.log (playlist_slug + ' - ' + history);
    lastperformance = 0;
    // global.superdebug ("ALBUM LIST - dentro da funcao [process id: "+processid+"]");
    global.debug (seqplay);

    if ((fav || history || playlist_slug) && !radio)
    {
      global.listplaylists (playlist_slug);
    }

    global.debug ('parametro radio - ' + radio);

    if (typeof composernameparam !== "undefined" && !fav && !playlist_slug && !history)
    {
      $('#genresworks h2').html('<a href="#">'+composernameparam+'</a>');
    }

    if (!fav && !playlist_slug && !history)
    {
      $('#genresworks h3').html(workname);
    }

    localStorage.lastworkid = wid;

    if (!fav && !radio && !perfid && !playlist_slug && !history)
    {
        $('#genres').css("display","none");
        $('#works').css("display","none");
        $('#searchbywork').css("display","none");
        $('#albums').html('');
    }
    else if ((fav || history || playlist_slug) && !radio)
    {
      $('#favorites .performance').remove();
    }

    global.wid = wid;
    albumfilter = [{ work_id: wid }];

    if (fav)
    {
        if (radio && global.concertmasterstatus.radioworks.length > 0)
        {
            albumfilter = [{ work_id: { $nin: global.concertmasterstatus.radioworks } }, { favorite: true }];
            //albumfilter[albumfilter.length] = { work_id: { $in: ["20177", "885531"] } };
        }
        else
        {
            albumfilter = [{ work_id: { $exists: true } }, { favorite: true }];
            //albumfilter[albumfilter.length] = { work_id: { $in: ["20177", "885531"] } };
        }
    }
    else if (history)
    {
        if (radio && global.concertmasterstatus.radioworks.length > 0)
        {
            albumfilter = [{ work_id: { $nin: global.concertmasterstatus.radioworks } }, { lastplayed: { $gte: Date.now()-(10*24*60*60*1000) } }];
            //albumfilter[albumfilter.length] = { work_id: { $in: ["20177", "885531"] } };
        }
        else
        {
            albumfilter = [{ lastplayed: { $gte: Date.now()-(10*24*60*60*1000) } }];
            //albumfilter[albumfilter.length] = { work_id: { $in: ["20177", "885531"] } };
        }
    }
    else if (playlist_slug)
    {
      if (radio && global.concertmasterstatus.radioworks.length > 0 && !seqplay)
      {
          albumfilter = [{ work_id: { $nin: global.concertmasterstatus.radioworks } }, { "performance_playlists.playlist_slug": playlist_slug }];
      }
      else
      {
        albumfilter = [{ "performance_playlists.playlist_slug": playlist_slug }];
      }
    }
    else
    {
        albumfilter = [{ work_id: wid }];
    }

    if (radio)
    {
        albumfilter[albumfilter.length] = { $not: { no_spotify: true } };
    }

    /*if (!global.options.compilations && !fav && !playlist_slug && !history)
    {
        albumfilter[albumfilter.length] = { performance_compilation: false };
    }*/

    if (history)
    {
      var albumsort = { lastplayed: -1 };
    }
    else if (playlist_slug && playlist_slug != "0")
    {
      var albumsort = { "performance_playlists.playlist_position": 1, composer_name: 1, work_title: 1, performance_id: 1 };
    }
    else
    {
      var albumsort = { composer_name: 1, work_title: 1, performance_id: 1 };
    }

    //console.log (albumfilter);
    //console.log (albumsort);

    // global.superdebug ("ALBUM LIST - DB RECORDINGS: antes");
    db.recordings.find({ $and: albumfilter }).sort(albumsort).exec (function (err, docs)
    {
        //console.log (err);
        //console.log (docs);

        var uniqueperfid = [];
        var uniqueperf = [];

        $.each (docs, function (i, el)
        {
          if ($.inArray(el.performance_id, uniqueperfid) === -1)
          {
            uniqueperfid.push(el.performance_id);
            uniqueperf.push(el);
          }
        });

        docs = uniqueperf;

        var dontplay = false;
        global.dox = docs;

        if (docs.length > 0) { global.workJSON = docs; }

        if (radio && docs.length == 0)
        {
            global.concertmasterstatus.radiotentativas++;
            global.debug (global.concertmasterstatus.radiotentativas);
            //global.debug ("apagando a lista, linha 497");
            if (global.concertmasterstatus.radiotentativas > 10)
            {
                global.concertmasterstatus.radiotentativas = 0;
                global.concertmasterstatus.supertentativas++;

                global.concertmasterstatus.radioworks = Array ();
            }
            global.debug (global.concertmasterstatus.supertentativas);

            if (global.concertmasterstatus.supertentativas > 1)
            {
              global.concertmasterstatus.supertentativas = 0;
              global.concertmasterstatus.radio = false;
              global.norecordings();
            }
            else if (global.concertmasterstatus.favor || global.concertmasterstatus.playlist_slug)
            {
              // global.superdebug ("RADIO - 608 - nao voltou nenhuma gravacao");
              global.radio (0);
            }
        }
        else if (radio && seqplay && global.concertmasterstatus.seq >= docs.length)
        {
          global.concertmasterstatus.seq = 0;
          global.concertmasterstatus.radio = false;
          dontplay = true;

          $('#tuning-modal').hide(); $('#lean_overlay').css({"display":"none"});

          $('#radiotop #goradio').removeClass('on');
          $('#playercontrols #skip').removeClass('radio');
        }
        else if (radio)
        {
            // global.superdebug ("FODEU DE VEZ - ficou parado porque nao se enquadrou em nada");
            //global.radio ();
        }

        function Discover (processid)
        {
            // global.superdebug ("ALBUM LIST _ DISCOVER _ [process id: "+processid+"]");
            if (global.dox.length <= 0)
            {
                // fetch url

                // global.superdebug ("ALBUM LIST _ DISCOVER _ REQUEST: antes");
                request({url: global.options.backend+'/performancev3/'+global.wid+'.json', json: false, timeout: global.options.timeout}, function (error, response, body)
                {
                    // global.superdebug ("ALBUM LIST _ DISCOVER _ REQUEST: depois");
                    global.debug ('linha 604, albumlist');
                    global.debug (global.options.backend+'/performancev3/'+global.wid+'.json');

                    if (error)
                    {
                        if (global.concertmasterstatus.radio)
                        {
                            // global.superdebug ("RADIO - 425 - pau na api concertmaster");
                            global.radio (processid);
                        }
                        else
                        {
                            global.debug ("parei tudo - nao consegui conectar na api concertmaster");
                            global.connectionerror ();
                        }
                    }
                    else
                    {
                        // consultando pagina da obra

                        var apivoltoumerda = false;

                        try
                        {
                            global.workJSON = JSON.parse(body);
                        }
                        catch (err)
                        {
                            apivoltoumerda = true;

                            if (global.concertmasterstatus.radio)
                            {
                                // global.superdebug ("RADIO - 444 - a api voltou merda");
                                global.radio (processid);
                            }
                            else
                            {
                                global.debug ("parei tudo - a api concertmaster voltou merda");
                                global.connectionerror();
                            }
                        }

                        // gravando performances no banco de dados local

                        if (!apivoltoumerda)
                        {
                          // global.superdebug ("ALBUM LIST _ DISCOVER _ DB: antes de gravar");
                          for (per in global.workJSON)
                          {
                              db.recordings.insert(global.workJSON[per], function (err, newDoc) { });
                              // global.superdebug ("ALBUM LIST _ DISCOVER _ DB: gravando");
                          }
                          // global.superdebug ("ALBUM LIST _ DISCOVER _ DB: depois de gravar");

                          global.debug ('nao tinha obra na base, fui buscar - ' + global.wid);
                          Show(processid);
                        }
                    }
                });
            }

            if (global.workJSON)
            {
                global.debug ('ja tinha obra na base - ' + global.wid);
                //global.debug (global.wid);

                Show(processid);
            }
        }

        function Show (processid)
        {
            global.debug (global.workJSON);

            Step
            (
                function Sorteio ()
                {
                    workJSON = global.workJSON;
                    nrper = Object.keys(workJSON).length;
                    return workJSON;
                },

                function SorteioRadio (err, workJSON)
                {
                    if (radio)
                    {
                        if (seqplay)
                        {
                          global.debug ('sorteio sequencial');
                          global.debug (global.concertmasterstatus.seq);
                          chrandom = Object.keys(workJSON)[global.concertmasterstatus.seq];
                          global.wid = workJSON[chrandom].work_id;
                          global.concertmasterstatus.seq++;
                          return chrandom;
                        }
                        else
                        {
                          rdrandom = Math.floor((Math.random() * nrper));
                          chrandom = Object.keys(workJSON)[rdrandom];
                          global.wid = workJSON[chrandom].work_id;
                          return chrandom;
                        }
                    }
                    else if (perfid)
                    {
                        for (chrandom in workJSON)
                        {
                            if (workJSON[chrandom].performance_id == perfid)
                            {
                                return chrandom;
                            }
                        }
                    }
                    else
                    {
                        return true;
                    }
                },

                function Mostra (err, chrandom)
                {
                    //global.superdebug ('rodando mostra');
                    //global.superdebug (workJSON);

                    if (typeof (chrandom) == 'string') {

                        global.debug ('a perf random - '+chrandom);

                        if (Object.keys(workJSON).length > 1)
                        {
                            for (performance in workJSON)
                            {
                                if (performance != chrandom)
                                {
                                    delete workJSON[performance];
                                }
                            }
                        }

                        global.debug (workJSON);
                    }

                    listaproibida = new Array;
                    listul = '#favalbums';

                    for (performance in workJSON)
                    {
                        pid = workJSON[performance].id;
                        tracks = workJSON[performance].tracks;
                        trackset = workJSON[performance].trackset;
                        playtime = workJSON[performance].playTime;

                        //console.log (workname);

                        if (!workname)
                        {
                            uworkname = workJSON[performance].work.name;
                        }
                        else
                        {
                            uworkname = workname;
                        }

                        //console.log (uworkname);

                        if (workJSON[performance].album)
                        {
                            global.concertmasterstatus.radiotentativas = 0;
                            global.concertmasterstatus.supertentativas = 0;
                            global.debug ("replace 557");
                            albumlabel = workJSON[performance].album.label.replace(/\'/gi,'');

                            /*if ((global.options.compilations || !workJSON[performance].performance_compilation || fav || playlist_slug)*/
                            if ((1==1)

                                && $.inArray (albumlabel, global.options.forbiddenlabels) == -1
                                && (global.options.historical || $.inArray (albumlabel, global.options.historicallabels) == -1)

                                )
                            {
                                composername = global.compbase[workJSON[performance].composer_id];

                                if (typeof composername === "undefined")
                                {
                                  //composername = global.compbase[workJSON[performance].composer_id];
                                  composername = workJSON[performance].composer_name;
                                }

                                albumcover = workJSON[performance].album.imagePath;

                                albumupc = workJSON[performance].album.upc;
                                //albumtitle = workJSON[performance].album.title.replace(/\'/gi,'');

                                global.debug ("replace 572");
                                albumcover = albumcover.replace (/\//g, '-');
                                albumcover = albumcover.replace ('-images-coverart-', '');
                                albumcover = albumcover.replace ('_100', '_300');
                                albumcover = '/img/' + albumcover;

                                if (typeof uworkname === "undefined") { uworkname = ''; }

                                alb = '';

                                alb = alb + '<li class="permalink"><a href="javascript:global.permalink('+workJSON[performance].work_id+','+pid+')">permalink</a></li>';

                                if (workJSON[performance].favorite)
                                {
                                    global.debug ("replace 584");
                                    alb = alb + '<li class="favorite"><a href="javascript:global.addfavorite('+pid+',\''+uworkname.replace(/\'/g,"\\\'")+'\')" class="is fav_'+pid+'">un-favorite</a></li>';
                                }
                                else
                                {
                                   global.debug ("replace 589");
                                   alb = alb + '<li class="favorite"><a href="javascript:global.addfavorite('+pid+',\''+uworkname.replace(/\'/g,"\\\'")+'\')" class="go fav_'+pid+'">favorite</a></li>';
                                }

                                if (playlist_slug && playlist_slug != "0")
                                {
                                  alb = alb + '<li class="playlist unplaylist"><a href="javascript:global.unplaylistperformance('+pid+',\''+playlist_slug+'\')">playlist</a></li>';
                                }
                                else
                                {
                                  alb = alb + '<li class="playlist doplaylist"><a href="javascript:global.playlistmodal('+pid+')">playlist</a></li>';
                                }

                                if (fs.existsSync (path.join(remote.app.getPath('userData'), 'img', albumupc+'_n.jpg')))
                                {
                                    if (fs.statSync (path.join(remote.app.getPath('userData'), 'img', albumupc+'_n.jpg')).size > 1000)
                                    {
                                        alb = alb + '<li class="cover"><a href="javascript:global.album(0,false,\'' + albumupc + '\','+pid+','+tracks+',\''+trackset+'\')"><img src="file://'+path.join(remote.app.getPath('userData'), 'img', albumupc+'_n.jpg')+'" onerror="this.src=\'img/nocover.png\'" /><div class="overlay"></div></a></li>';
                                    }
                                    else
                                    {
                                        alb = alb + '<li class="cover"><a href="javascript:global.album(0,false,\'' + albumupc + '\','+pid+','+tracks+',\''+trackset+'\')">';

                                        if (albumcover != '/img/')
                                        {
                                          global.filedownload (global.options.backend+albumcover, albumupc+'_n.jpg', function(){});

                                          global.debug ('linha 818, albumlist');
                                          global.debug (global.options.backend+albumcover + albumupc+'_n.jpg');

                                          alb = alb + '<img src="'+global.options.backend+albumcover+'" onerror="this.src=\'img/nocover.png\'" />';
                                        }
                                        else
                                        {
                                          alb = alb + '<img src="img/nocover.png" onerror="this.src=\'img/nocover.png\'" />';
                                        }

                                        alb = alb + '<div class="overlay"></div></a></li>';
                                    }
                                }
                                else
                                {
                                    global.filedownload (global.options.backend+albumcover, albumupc+'_n.jpg', function(){});

                                    global.debug ('linha 840, albumlist');
                                    global.debug (global.options.backend+albumcover + albumupc+'_n.jpg');

                                    alb = alb + '<li class="cover"><a href="javascript:global.album(0,false,\'' + albumupc + '\','+pid+','+tracks+',\''+trackset+'\')">';
                                    if (albumcover != '/img/')
                                    {
                                      alb = alb + '<img src="'+global.options.backend+albumcover+'" onerror="this.src=\'img/nocover.png\'" />';
                                    }
                                    else
                                    {
                                      alb = alb + '<img src="img/nocover.png" onerror="this.src=\'img/nocover.png\'" />';
                                    }
                                    alb = alb + '<div class="overlay"></div></a></li>';
                                }

                                global.debug ("replace 613");
                                alb = alb+'<li class="composer"><a href="javascript:global.genres(\''+workJSON[performance].composer_id+'\', \''+composername.replace('...','').replace(/\'/g,"\\\'")+'\');">'+composername.replace('...','')+'</a></li>';
                                alb = alb+'<li class="work"><a href="javascript:global.albumlist(0,\''+workJSON[performance].work_id+'\',false,false,\''+uworkname.replace(/\'/g,"\\\'")+'\', \'\', \''+composername.replace('...','').replace(/\'/g,"\\\'")+'\')">'+uworkname+'</a></li>';
                                albp = '';
                                albc = '';
                                albo = '';
                                albor = '';
                                classmain = '';

                                if (workJSON[performance].performers.length <= 4)
                                {
                                    classmain = 'mainperformer';
                                }

                                perfnum = 0;

                                for (performers in workJSON[performance].performers)
                                {
                                    perfnum = perfnum + 1;

                                    if (workJSON[performance].performers[performers].info.trim() == "Conductor" || workJSON[performance].performers[performers].info.trim() == "Director")
                                    {
                                        albc = albc + '<li class="mainperformer"><strong>'+workJSON[performance].performers[performers].name+'</strong>, ' + workJSON[performance].performers[performers].info + '</li>';
                                    }
                                    else if (perfnum <= 2 && (workJSON[performance].performers[performers].info.trim() == "Harpsichord" || workJSON[performance].performers[performers].info.trim() == "Piano" || workJSON[performance].performers[performers].info.trim() == "Violin" || workJSON[performance].performers[performers].info.trim() == "Clarinet" || workJSON[performance].performers[performers].info.trim() == "Cello"))
                                    {
                                        albc = albc + '<li class="mainperformer"><strong>'+workJSON[performance].performers[performers].name+'</strong>, ' + workJSON[performance].performers[performers].info + '</li>';
                                    }
                                    else if (workJSON[performance].performers[performers].info.trim() == "Chamber Ensemble" || workJSON[performance].performers[performers].info.trim() == "String Quartet" || workJSON[performance].performers[performers].info.trim() == "Ensemble" || workJSON[performance].performers[performers].info.trim() == "Orchestra" || workJSON[performance].performers[performers].info.trim() == "Chamber Orchestra")
                                    {
                                        albor = albor + '<li class="mainperformer"><strong>'+workJSON[performance].performers[performers].name+'</strong></li>';
                                    }
                                    else if (workJSON[performance].performers[performers].info.trim() == "Chorus/Choir" || workJSON[performance].performers[performers].info.trim() == "Choir")
                                    {
                                        albo = albo + '<li class="'+classmain+'"><strong>'+workJSON[performance].performers[performers].name+'</strong></li>';
                                    }
                                    else
                                    {
                                        albp = albp + '<li class="'+classmain+'"><strong>'+workJSON[performance].performers[performers].name+'</strong>, ' + workJSON[performance].performers[performers].info + '</li>';
                                    }
                                }

                                albp = albp + albo + albor + albc;
                                alb = alb + '<li class="performers"><ul>' + albp + '</ul></li>';
                                alb = alb + '<li class="label">'+albumlabel+'</li>';
                                //<li class="listen">listen</a></li>';




                                //global.playerinfo[pid] = '<li><ul>'+alb+'</ul></li>';
                                global.playerinfo[pid] = alb;
                                global.workinfo[pid] = uworkname;

                                if (fav || playlist_slug || history)
                                {
                                    listul = '#favalbums';
                                }
                                else
                                {
                                    listul = '#albums';
                                }

                                if (!radio && !perfid)
                                {
                                    if (playlist_slug && playlist_slug != "0" && playlist_slug != "9999999999")
                                    {
                                      draggable = "draggable";
                                    }
                                    else
                                    {
                                      draggable = "";
                                    }

                                    if (typeof lastperformance == "undefined")
                                    {
                                      lastperformance = 0;
                                    }

                                    //global.superdebug ("estou quase mostrando o album");
                                    //global.superdebug ("playlist_slug: " + playlist_slug);

                                    if (lastperformance != pid)
                                    {
                                      if (playlist_slug != undefined && playlist_slug != 0 && !history)
                                      {
                                        pidsortarray = $.grep(workJSON[performance].performance_playlists, function(e){ return e.playlist_slug = playlist_slug; });
                                        pidsort = 'pidsort="'+ pidsortarray[0].playlist_position +'"';
                                      }
                                      else
                                      {
                                        pidsort = "";
                                      }

                                      //global.superdebug ("vou mostrar");

                                      if ((global.options.compilations || !workJSON[performance].performance_compilation || fav || playlist_slug))
                                      {
                                        if (global.options.notshow === false)
                                        {
                                          $(listul).append('<li pid="'+pid+'" '+ pidsort +' class="performance '+ draggable +'"><ul>'+alb+'</ul></li>');
                                        }
                                        global.options.notshow = false;
                                      }
                                      else if (workJSON[performance].performance_compilation)
                                      {
                                        //console.log ('gongou');
                                        listaproibida[listaproibida.length] = '<li pid="'+pid+'" '+ pidsort +' class="performance '+ draggable +'"><ul>'+alb+'</ul></li>';
                                      }

                                      lastperformance = pid;
                                    }
                                }
                                else
                                {
                                    global.debug ('performance randomica ou vinda por argumento');
                                    global.debug ('hoooooooooo');

                                    if (radio)
                                    {
                                        // global.superdebug ("ALBUM - albumlist - radio - "+albumupc);
                                        global.album (processid, true,albumupc,pid,tracks,trackset);
                                    }
                                    else
                                    {
                                        // global.superdebug ("ALBUM - albumlist - nao radio - "+albumupc);
                                        global.album (processid, false,albumupc,pid,tracks,trackset);
                                    }
                                }


                            }
                            else
                            {
                                if (radio)
                                {
                                    // global.superdebug ("RADIO - 674 - compilacao ou historico");
                                    global.radio (processid);
                                }
                            }
                        }
                    }

                    /*console.log ('albums mostrados: ' + $(listul).children().length);
                    console.log ('albums escondidos: ' + listaproibida.length);
                    console.log ('ratio: ' + listaproibida.length / ($(listul).children().length + listaproibida.length));*/

                    if (listaproibida.length / ($(listul).children().length + listaproibida.length) > 0.80)
                    {
                      for (albumproibido in listaproibida)
                      {
                        $(listul).append(listaproibida[albumproibido]);
                      }
                    }

                    if (!remote.getCurrentWindow().isVisible())
                    {
                      remote.getGlobal('loader').close();
                      remote.getCurrentWindow().show();
                    }

                    if (playlist_slug && playlist_slug != "0" && !radio && playlist_slug != "9999999999")
                    {
                      $('#favalbums').sortable('destroy');
                      $('#favalbums').sortable().bind('sortupdate', function (e, ui) { global.moveplaylist (ui); });
                    }

                    delete global.workJSON;

                    global.debug (sessionStorage.albumscroll);
                    global.debug (fav);
                    global.debug (radio);
                    global.debug (perfid);
                    global.debug ((!fav && !radio && !perfid));

                    if (sessionStorage.albumscroll != undefined && (!fav && !radio && !perfid))
                    {
                        albumscroll = JSON.parse(sessionStorage.albumscroll);

                        if (albumscroll.work == global.wid)
                        {
                            $('#albums').scrollTop(albumscroll.scroll);
                        }
                    }
                }
            );
        }

        if (!dontplay)
        {
          Discover(processid);
        }
    });
}

global.filedownload = function(uri, filename, callback)
{
    global.debug (remote.app.getPath('userData'));
    global.debug (filename);
    global.debug (remote.app.getPath('userData') + '/img/' + filename);

    request.head(uri, function(err, res, body)
    {
        var r = request(uri).pipe(fs.createWriteStream(remote.app.getPath('userData') + '/img/' + filename));
        r.on('close', callback);
    });
};

global.concertmasterstatus.goradio = false;

global.goradio = function ()
{
    global.concertmasterstatus.goradio = true;
    $('#radiotop #goradio').toggleClass('on');
    $('#playercontrols #skip').toggleClass('radio');

    if ($('#radiotop #goradio').hasClass('on'))
    {
        // global.superdebug ("RADIO - 594 - apertou o botao");
        global.radio (0,$('#radiotop .composers').val(), $('#radiotop .genres').val(), $('#radiotop .periods').val(), false, '', false);
        ga('send', {
          hitType: 'pageview',
          page: global.options.version+'/radio/'
        });
    }
    else
    {
        global.concertmasterstatus.favor = false;
        global.concertmasterstatus.radio = false;
    }
}

global.jetsetradio = function ()
{
  if (global.concertmasterstatus.goradio)
  {
    $('#radiotop select').prop('disabled','');
    global.concertmasterstatus.cid = $('#radiotop .composers').val();
    global.concertmasterstatus.gid = $('#radiotop .genres').val();
    global.concertmasterstatus.age = $('#radiotop .periods').val();
  }
  else if (global.concertmasterstatus.radio)
  {
    $('#radiotop select').prop('disabled','disabled');
  }
  else
  {
    $('#radiotop select').prop('disabled','');
  }
}

global.keeptidy = function ()
{
	document.styleSheets[0].addRule("::-webkit-scrollbar", "width: 3px; height:3px;");
}

global.setfavcomp = function ()
{
  window.favcomp = Array ();
  db.works.find({ composer_favorite: true }, function (err, docs)
  {
      for (id in docs)
      {
          window.favcomp.push(docs[id].composer_id);
      }
  });
}

global.setforbcomp = function ()
{
  window.forbcomp = Array ();
  db.works.find({ composer_forbidden: true }, function (err, docs)
  {
      for (id in docs)
      {
          window.forbcomp.push(docs[id].composer_id);
      }
  });
}

global.setfavworks = function ()
{
  window.favworks = Array ();
  window.favworkscomp = Array ();
  db.works.find({ work_favorite: true }, function (err, docs)
  {
      for (id in docs)
      {
          window.favworks.push(docs[id].work_id);
          window.favworkscomp[docs[id].work_composer] = docs[id].work_composer;
      }

      window.favworkscomp = window.favworkscomp.filter(function(n){ return n != undefined });
  });
}

global.readstats = function ()
{
    global.setfavcomp ();
    global.setforbcomp ();
    global.setfavworks ();
    retorno = Array ();
    window.compositoresprediletos = Array ();
    window.periodosprediletos = Array ();
    window.obrasprediletas = Array ();
    window.generosprediletos = Array ();

      db.stats.find({ composer_id: { $exists: true } }).sort({ plays: -1 }).limit(10).exec(function (err, docs)
      {
          for (id in docs)
          {
              window.compositoresprediletos.push(docs[id].composer_id);
          }

          //window.compositoresprediletos = window.compositoresprediletos.join();
      });

      db.stats.find({ composer_period: { $exists: true } }).sort({ plays: -1 }).limit(2).exec(function (err, docs)
      {
          for (id in docs)
          {
              window.periodosprediletos.push(docs[id].composer_period);
          }
      });

      db.stats.find({ work_id: { $exists: true } }).sort({ plays: -1 }).limit(20).exec(function (err, docs)
      {
          for (id in docs)
          {
              window.obrasprediletas.push(docs[id].work_id);
          }
      });

      db.stats.find({ work_genre: { $exists: true } }).sort({ plays: -1 }).limit(2).exec(function (err, docs)
      {
          for (id in docs)
          {
              window.generosprediletos.push(docs[id].work_genre);
          }

          //window.generosprediletos = window.generosprediletos.join();
      });
}

global.slug = function (str)
{
  str = str.replace(/^\s+|\s+$/g, ''); // trim
  str = str.toLowerCase();

  // remove accents, swap ñ for n, etc
  var from = "ãàáäâẽèéëêìíïîõòóöôùúüûñç·/_,:;";
  var to   = "aaaaaeeeeeiiiiooooouuuunc------";
  for (var i=0, l=from.length ; i<l ; i++) {
    str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
  }

  str = str.replace(/[^a-z0-9 -]/g, '') // remove invalid chars
    .replace(/\s+/g, '-') // collapse whitespace and replace by -
    .replace(/-+/g, '-'); // collapse dashes

  return str;
};

global.album = function (processid, radio, aid, pid, tracks, trackset, auto)
{
    // global.superdebug ("ALBUM - dentro da funcao [process id: "+processid+"]");
    /*
      resumo da função:

      1. mexe na interface
      2. vai à base procurar o album solicitado
        2.1. chama a função Album Discover para buscar info do album na base ou na nuvem
          2.1.1. chama a função Album Show para mostrar o album na interface
            2.1.1.1. vai à base ou à nuvem em busca das faixas no Spotify
              2.1.1.1.1. chama a função Spotify Loop para buscar a lista de faixas na nuvem
              2.1.1.1.2. chama a função Spotify Data para gravar a lista de faixas na base
            2.1.1.2. chama a função Show Player pra mostrar o player
    */

    /* mexendo na interface */

    if (!$('#tuning-modal').is(':visible')) { $('#tuning-modal').leanModal(); }
    global.debug ('haaaaaaaaaaa');
    global.debug ('rodando album');
    global.concertmasterstatus.radio = radio;

    if (!radio)
    {
      $('#radiotop #goradio').removeClass('on');
      $('#playercontrols #skip').removeClass('radio');

      $('#radiotop select.composers').val('All');
      $('#radiotop select.periods').val('All');
      $('#radiotop select.genres').val('All');

      $('#radiotop select.composers').trigger('change.select2');
      $('#radiotop select.periods').trigger('change.select2');
      $('#radiotop select.genres').trigger('change.select2');

      if (!auto) { global.stats (pid); }
    }

    /* fim da mexida na interface */

    /* procurando na base o album solicitado */

    // global.superdebug ("DB ALBUMS - chamando - "+aid);
    db.albums.find({ album_id: aid }).exec (function (err, docs)
    {
        // global.superdebug ("DB ALBUMS - dentro -"+aid);
        addzeros = '';
        global.doxx = docs;
        if (docs.length > 0) { global.bdpid = docs[0].album_data; }

        /* funcao album.discover */

        function AlbumDiscover (aid)
        {
            // global.superdebug ("ALBUM DISCOVER - dentro da funcao - "+aid);
            if (global.doxx.length <= 0)
            {
                // global.superdebug ("ALBUM DISCOVER - nao tem na base, bora pra nuvem");
                /* nao tinha o album na base, teve que ir à nuvem */

                addaids = new String(aid);
                if (addaids.charAt(0)=='9' || addaids.charAt(0)=='2' || addaids.charAt(0)=='1') { addzeros = '0'; }

                // fetch url

                // global.superdebug ("ALBUM DISCOVER - vai chamar a nuvem");
                request({url:global.options.backend+'/album/'+addzeros+aid+'.json', json: true, timeout: global.options.timeout}, function (error, response, bodyalb)
                {
                   // global.superdebug ("ALBUM DISCOVER - terminou de chamar a nuvem");
                    global.debug ('linha 1194, album');
                    // global.superdebug (global.options.backend+'/album/'+addzeros+aid+'.json');

                    if (error)
                    {
                        if (global.concertmasterstatus.radio)
                        {
                            // global.superdebug ("RADIO - 823 - pau na api concertmaster");
                            global.radio (processid);
                        }
                        else
                        {
                            global.debug ("parei tudo - pau na api concertmaster");
                            global.connectionerror ();
                        }
                    }
                    else
                    {
                        // consultando pagina do album

                        var apivoltoulixo = false;

                        try
                        {
                            //global.bdpid = JSON.parse(bodyalb);
                            global.bdpid = bodyalb;
                        }
                        catch (err)
                        {
                            apivoltoulixo = true;
                            if (global.concertmasterstatus.radio)
                            {
                                // global.superdebug ("RADIO - 846 - a api voltou lixo");
                                global.radio (processid);
                            }
                            else
                            {
                                // global.superdebug ("parei tudo - a api concertmaster voltou lixo");
                                global.connectionerror();
                            }
                            // global.superdebug (bodyalb);
                            // global.superdebug (err);
                        }

                        // gravando album no banco de dados local

                        if (!apivoltoulixo)
                        {
                          var doc =
                          {
                              album_id: aid,
                              album_data: global.bdpid
                          };

                          db.albums.insert(doc, function (err, newDoc) { });

                          // global.superdebug ('ALBUMSHOW - album ' + aid +' nao estava na base, fui na nuvem');
                          AlbumShow(aid);
                        }
                    }
                });
            }

            /* fim da busca do álbum na nuvem */

            /* o album já estava na base, pode mostrar */

            else if (global.bdpid) { AlbumShow(aid); }
            else
            {
              // global.superdebug ("ALBUM DISCOVER - fudeu tudo");

              db.recordings.update({ performance_id: pid }, { $set: { no_spotify: true } }, {}, function (err, numReplaced)
              {
                  global.debug ('apaguei '+numReplaced+' gravacao da base');

                  if (global.concertmasterstatus.radio)
                  {
                      // global.superdebug ("RADIO - 1350 - fudeu tudo (mas eu digo que o spotify nao tem a gravacao)");
                      global.radio (processid);
                  }
                  else
                  {
                      global.notavailable ();
                  }
              });
            }
        }

        /* fim da funcao album.discover */

        /* funcao album.show */

        function AlbumShow (aid)
        {
            global.debug ('rodando a.lbumshow - ' + aid);

            aids = new String(aid);
            univspo = ''; univdee = '';

                if (aids[0]=='0' && aids[1]=='2') { univspo='00'; }

                global.debug ('vamo la spotify');
                bdpid = global.bdpid;
                //delete global.bdpid;

                /* funcao de request das faixas no spotify */

                spotifyloop = function (spurl, upc)
                {
                    request({url:spurl, json: true, timeout: global.options.timeout}, function (error, response, spotr)
                    {
                        global.debug (spurl);

                        if (error)
                        {
                            if (global.concertmasterstatus.radio)
                            {
                                // global.superdebug ("RADIO - 883 - pau na conexao com spotify");
                                global.radio (processid);
                            }
                            else
                            {
                                global.debug ("parei tudo - nao conectei com o spotify");
                                global.connectionerror ();
                            }
                        }
                        else
                        {
                            global.debug (spotr.items);
                            global.spotrtemp = global.spotrtemp.concat(spotr.items);
                            global.debug (global.spotrtemp);

                            if (spotr.next)
                            {
                                // global.superdebug ("SPOTIFY LOOP - album grandao, precisei entrar em loop");
                                spotifyloop (spotr.next, upc);
                            }
                            else
                            {
                                doc = { upc: upc, tracks: global.spotrtemp }
                                db.spotify.insert(doc, function (err) { });

                                // global.superdebug ("SPOTIFY DATA - foi na nuvem e ja terminou o loop");
                                spotifydata (global.spotrtemp);
                            }

                        }
                    });
                }

                /* fim da funcao de request no spotify */

                /* funcao de trazer as faixas do spotify, seja na base (junto com o album), seja na nuvem */

                spotifydata = function (spotr)
                {
                    global.debug ('trackset =' + trackset);
                    global.debug (spotr);
                    if (trackset != 'undefined' && (typeof trackset == 'string' || typeof trackset == 'object') && trackset != "")
                    {
                        global.debug ('faixas na base');

                        if (typeof trackset == 'string')
                        {
                          //global.superdebug ('PLAYER - faixas na base - '+ trackset + ' - spotr len - ' + spotr.length);
                          showplayer (trackset.split(','), spotr);
                        }
                        else if (typeof trackset == 'object')
                        {
                          //global.superdebug ('PLAYER - faixas na base - '+ trackset.toString() + ' - spotr len - ' + spotr.length);
                          showplayer (trackset, spotr);
                        }
                    }
                    else
                    {
                        global.debug ('nao tinha na base, fui na nuvem');
                        request({url:global.options.backend+'/tracks/'+pid+'.json', json: true, timeout: global.options.timeout}, function (error, response, trackify)
                        {
                            global.debug ('linha 1311, album');
                            global.debug (global.options.backend+'/tracks/'+pid+'.json');

                            if (error || trackify.length <= 0)
                            {
                                global.debug ("parei tudo - nao consegui conectar a api concertmaster");
                                global.connectionerror ();
                            }
                            else
                            {
                                db.recordings.update({ performance_id: pid }, { $set: { trackset: trackify } }, {}, function (err, numReplaced)
                                {
                                    global.debug ('acrescentei faixas em '+numReplaced+' gravacao da base');
                                });

                                //global.superdebug ('PLAYER - faixas na nuvem - trackify: '+ trackify.toString() + ' - spotr len - ' + spotr.length);
                                showplayer (trackify, spotr);
                            }
                        });
                    }
                }

                /* fim da funcao de buscar as faixas do spotify */

                /* inicio do player */

                showplayer = function (trackify, spotr)
                {
                      /* buscando faixas etc */

                      $('#playerinfo').html(global.playerinfo[pid]);
                      global.concertmasterstatus.lastpid = pid;
                      global.concertmasterstatus.lastwork = global.workinfo[pid];

                      global.debug ('recuperando faixas spotify');
                      spotrids = '';

                      if (global.concertmasterstatus.radio)
                      {
                          global.debug ('colocando obra na lista - ' + global.wid);
                          global.concertmasterstatus.radioworks[global.concertmasterstatus.radioworks.length] = global.wid;
                      }

                      global.concertmasterstatus.trids = new Array();
                      global.concertmasterstatus.currentpoint = 0;
                      global.concertmasterstatus.acclength = Array ();
                      global.concertmasterstatus.lengths = Array ();

                      $('#playertracks').html('');
                      $('#globaltracks').html('');

                      it=0;

                      for (pidd in bdpid)
                      {
                          if ($.inArray (bdpid[pidd].track_id.toString(), trackify) != -1)
                          {
                              try
                              {
                                  global.debug ('faixa OK - ' + spotr[pidd].id);
                                  spotrids = spotrids + ',' + spotr[pidd].id;
                                  global.concertmasterstatus.trids[global.concertmasterstatus.trids.length] = spotr[pidd].id;
                                  global.concertmasterstatus.lengths[global.concertmasterstatus.lengths.length] = (spotr[pidd].duration_ms/1000);

                                  if (it)
                                  {
                                      global.concertmasterstatus.acclength[global.concertmasterstatus.acclength.length] = global.concertmasterstatus.currentlength;
                                      global.concertmasterstatus.currentlength = global.concertmasterstatus.currentlength + (spotr[pidd].duration_ms/1000);
                                  }
                                  else
                                  {
                                      global.concertmasterstatus.currentlength = (spotr[pidd].duration_ms/1000);
                                      global.concertmasterstatus.acclength[0] = 0;
                                  }

                                  it++;
                              }
                              catch(err)
                              {
                                  //global.superdebug (err);

                                  if (global.concertmasterstatus.radio)
                                  {
                                      // global.superdebug ("RADIO - 1005 - spotify nao tem a gravacao");
                                      global.radio (processid);
                                  }
                                  else
                                  {
                                      global.notavailable ();
                                  }
                              }
                          }
                      }

                      //delete global.bdpid;
                      trids = Array ();

                      it=0;
                      classtrack = '';
                      trackadjust = '';
                      global.debug (trackify.length);
                      lastpct = 0;

                      if (trackify.length >= 60)
                      {
                          $('#globaltracks').addClass("toomanytracks");
                      }
                      else
                      {
                          trackadjust = ' - 2px';
                          $('#globaltracks').removeClass("toomanytracks");
                      }

                      for (pidd in bdpid)
                      {
                          if ($.inArray (bdpid[pidd].track_id.toString(), trackify) != -1)
                          {
                              try
                              {
                                  trids[trids.length] = spotr[pidd].id;

                                  $('#playertracks').append('<li><a class="tracktitle" href="javascript:global.playtrack('+it+')">'+bdpid[pidd].track_title+'</a><div id="timer-'+it+'" class="timer">0:00</div><div id="slider-'+it+'" class="slider"><div class="buffer"></div><div class="bar"></div></div><div class="duration">'+global.readabletime(spotr[pidd].duration_ms/1000)+'</div></li>');
                                  /*$("#slider-"+it).click(function(evt,arg){

                                      var left = evt.offsetX;
                                      global.debug(evt.currentTarget.id);
                                      if (evt.currentTarget.id == 'slider-'+global.concertmasterstatus.trindex)
                                      {
                                          global.slider ([Math.floor(((evt.offsetX/$(this).width()) * global.concertmasterstatus.lengths[global.concertmasterstatus.trindex])), global.concertmasterstatus.lengths[global.concertmasterstatus.trindex]]);
                                          window.frames["spotiplayeriframe"].contentWindow.SPR.setPlayPosition(Math.floor(((evt.offsetX/$(this).width()) * global.concertmasterstatus.lengths[global.concertmasterstatus.trindex])));
                                      }
                                  });*/

                                  pctsize = ((spotr[pidd].duration_ms/1000)/global.concertmasterstatus.currentlength)*100;

                                  if (pctsize == 0) { pctsize = 1; lastpct = 1; } else if (lastpct == 1) { pctsize = pctsize-1; lastpct = 0; } else { lastpct = 0; }

                                  $('#globaltracks').append('<li style="width: calc('+Math.round(pctsize*1000)/1000+'%'+trackadjust+')"><a class="tracktitle" href="javascript:global.playtrack('+it+')">'+eval(it+1)+'</a><div id="globalslider-'+it+'" class="slider"><div class="buffer"></div><div class="bar"></div></div><div id="globaltimer-'+it+'" class="timer">0:00</div><div class="duration">'+global.readabletime(spotr[pidd].duration_ms/1000)+'</div></li>');
                                  /*$("#globalslider-"+it).click(function(evt,arg){

                                      var left = evt.offsetX;
                                      global.debug(evt.currentTarget.id);
                                      if (evt.currentTarget.id == 'globalslider-'+global.concertmasterstatus.trindex)
                                      {
                                          global.slider ([Math.floor(((evt.offsetX/$(this).width()) * global.concertmasterstatus.lengths[global.concertmasterstatus.trindex])), global.concertmasterstatus.lengths[global.concertmasterstatus.trindex]]);
                                          window.frames["spotiplayeriframe"].contentWindow.SPR.setPlayPosition(Math.floor(((evt.offsetX/$(this).width()) * global.concertmasterstatus.lengths[global.concertmasterstatus.trindex])));
                                      }
                                  });*/

                                  it++;
                              }
                              catch (err)
                              {
                                  //global.debug (err);
                              }
                          }
                      }

                      global.debug (trids);

                      global.concertmasterstatus.tracks = tracks;
                      global.concertmasterstatus.trids = trids;
                      global.concertmasterstatus.spotitrids = trids;
                      global.concertmasterstatus.trindex = 0;

                      $('#durationglobal').html(global.readabletime(global.concertmasterstatus.currentlength));
                      global.concertmasterstatus.stopped = false;



                    global.stop();
                    global.concertmasterstatus.usingplayer = 'spotify';

                    $('#playerbar').css('display',"block");
                    $('#spotiplayer').css('display',"none");
                    $('#main').css('bottom',"68px");
                    $('#nowplaying').css('bottom',"68px");
                    $('#sidebar').css('bottom',"68px");
                    $('#favorites').css('bottom',"348px");

                    //$('#playerbar').css('display',"none");
                    //$('#main').css('bottom',"0px");
                    //$('#nowplaying').css('bottom',"0px");
                    //$('#sidebar').css('bottom',"0px");
                    //$('#favorites').css('bottom',"276px");
                    //$('#playertracks').html('');
                    //$('#nowplaying').removeClass('up');
                    //$('#nowplaying').addClass('down');
                    //$('#spotiplayer').css('display',"block");

                    if (auto)
                    {
                        $('#tuning-modal').closeModal();
                    }
                    else
                    {
                      if (global.concertmasterstatus.spotifyclient == true || true)
                      {
                        if (global.concertmasterstatus.spotitimer)
                				{
                					clearInterval (global.concertmasterstatus.spotitimer);
                				}

                        global.concertmasterstatus.stopped = false;
                        global.debug ("chamei o spotify na linha 1217 do composers");

                        // global.superdebug ("SPOTIFY WIDGET - 1614 - rodei tracks "+spotrids+" [process id: "+processid+"]");

                        //window.frames["spotiplayeriframe"].contentWindow.SPR.playSpotifyURI("spotify:trackset:Concertmaster:"+spotrids);

                        window.frames["spotiplayeriframe"].contentWindow.SPR.playSpotifyURI("spotify:track:0trIWT17aIBpLpelCRTUIQ");


                        global.concertmasterstatus.spotitimer = setInterval(global.autoslider, 1000);
                        $('#playpause').removeClass("play");
                        $('#playpause').addClass("pause");

                        $('#tuning-modal').closeModal();
                      }
                      else
                      {
                        $('#tuning-modal').hide();
                        global.spotifyerror ();
                      }
                    }

                    global.concertmasterstatus.tracks = tracks;
                    global.concertmasterstatus.trindex = 0;

                    localStorage.last = [aid, pid, tracks];
                    localStorage.lasttrackset = trackify;
                    localStorage.lastplayer = global.playerinfo[pid];

                    global.notification(global.playerinfo[pid], auto);

                    if (!auto)
                    {
                      global.addhist (Number (global.concertmasterstatus.lastpid), global.concertmasterstatus.lastwork);
                    }
                }

                /* fim do player */

                /* consulta a base se a lista de faixas no spotify está local */

              db.spotify.find({ upc: univspo.concat (aid) }).exec (function (err, docs)
              {
                if (docs.length > 0)
                {
                  // global.superdebug ("SPOTIFY DATA - ja estava na base");
                  spotifydata (docs[0].tracks);
                }
                else
                {
                  // global.superdebug ("SPOTIFY FETCH - indo a nuvem buscar o id do album - "+univspo+aid);

                  global.getspapitoken (function (error, response, spapitoken)
                  {
                      request({headers: {'Authorization': 'Bearer '+spapitoken},url:'https://api.spotify.com/v1/search?q=upc:'+univspo+aid+' OR upc:0'+univspo+aid+'&type=album', json: true, timeout: global.options.timeout}, function (error, response, spo)
                      {
                          //console.log (spo);
                          upc = univspo.concat (aid);
                          global.debug ('linha 1531, album');
                          global.debug ('v1/search?q=upc:'+univspo+aid+'&type=album');

                          if (error)
                          {
                              global.debug ("parei tudo - nao consegui conectar ao spotify");
                              global.connectionerror ();
                          }
                          else
                          {
                              global.debug (spo);

                              if (spo.albums.total > 0)
                              {
                                  uri = spo.albums.items[0].uri;
                                  spoid = spo.albums.items[0].id;

                                  spotritems = Array ();

                                  // tem, vamos!

                                  global.spotrtemp = Array ();
                                  // global.superdebug ("SPOTIFY LOOP - comecando a procurar as faixas no spotify - "+spoid);
                                  spotifyloop (global.options.backend+'/spotify/'+spoid+'.json', upc);
                              }
                              else
                              {
                                  global.debug ('o spotify nao tem este album');

                                  db.recordings.update({ performance_id: pid }, { $set: { no_spotify: true } }, {}, function (err, numReplaced)
                                  {
                                      global.debug ('apaguei '+numReplaced+' gravacao da base');

                                      if (global.concertmasterstatus.radio)
                                      {
                                          // global.superdebug ("RADIO - 1005 - spotify nao tem a gravacao");
                                          global.radio (processid);
                                      }
                                      else
                                      {
                                          global.notavailable ();
                                      }
                                  });
                              }
                          }
                      });
                    });
                  }
              });

              /* fim da consulta à base sobre spotify */
        }

        /* fim da funcao album.show */

        /* chama a funcao album.discover */

        // global.superdebug ("ALBUM DISCOVER - album "+ aid);
        AlbumDiscover(aid);
    });
}

global.genres = function (cid, composername, gid)
{
    localStorage.lastcomposerid = cid;
    localStorage.lastcomposername = composername;

    ga('send', {
      hitType: 'pageview',
      page: global.options.version+'/browse/'+encodeURI(composername)
    });

    $('#genresworks h2').html('<a href="javascript:global.genres (localStorage.lastcomposerid, localStorage.lastcomposername, localStorage.lastgenre)">'+composername+'</a>');
    $('#genresworks h3').html('');
    $('#genres').css("display","inline-block");
    $('#works').css("display","inline-block");
    $('#searchbywork').css("display","block");
    $('#genres').html('');
    $('#works').html('');
    $('#albums').html('');

    $('#genres').append('<li id="all"><a href="javascript:global.worklist(\''+cid+'\',\'all\');">All</a><a class="radio" href="javascript:global.radio(0,\''+cid+'\',\'All\',\'All\',false,\'\',false);">radio</a></li>');
    $('#genres').append('<li id="fav"><a href="javascript:global.worklist(\''+cid+'\',\'fav\');">Favorites</a><a class="radio" href="javascript:global.radio(0,\''+cid+'\',\'fav\',\'All\',false,\'\',false);">radio</a></li>');

    db.works.find({ $and: [{ work_composer: cid }, { work_genre: { $in: ['Chamber', 'Keyboard', 'Orchestral', 'Stage', 'Vocal'] } }] }).sort({ work_genre: 1 }).exec(function (err, docsg)
    {
        var lastgenre = '';
        for (genre in docsg)
        {
            if (docsg[genre].work_genre != lastgenre)
            {
                $('#genres').append('<li id="'+global.slug(docsg[genre].work_genre)+'"><a href="javascript:global.worklist(\''+docsg[genre].work_composer+'\',\''+docsg[genre].work_genre+'\');">'+docsg[genre].work_genre+'</a><a class="radio" href="javascript:global.radio(0,\''+docsg[genre].work_composer+'\',\''+docsg[genre].work_genre+'\',\'All\',false,\'\',false);">radio</a></li>');
                lastgenre = docsg[genre].work_genre;
            }
        }

        if (gid)
        {
            global.worklist (cid, gid);
        }
        else
        {
            localStorage.lastgenre = 'all';
            global.worklist (cid, 'all');
        }
    });
}

global.entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
  };

global.escapeHtml = function (string)
{
    return String(string).replace(/[&<>"'\/]/g, function (s) {
      return global.entityMap[s];
    });
}

global.stats = function (pid)
{
    global.debug (pid);
    db.recordings.find({ performance_id: pid }).exec (function (err, docss)
    {
        global.debug (docss);

        db.works.find({ work_id: docss[0].work_id }).exec (function (err, docs)
        {
            global.debug (docs);

            db.works.find({ composer_id: docss[0].composer_id }).exec (function (err, docssss)
            {
                global.debug (docssss);
                global.setstats (docss[0].composer_id, docss[0].work_id, docs[0].work_genre, docssss[0].composer_period);
            });


        });
    });
}

global.setstats = function (cid, wid, genre, period)
{
    db.stats.update({ composer_id: cid }, { $inc: { plays: 1 }}, {multi: true, upsert: true}, function (err, numReplaced)
    {
        global.debug ('composer stats: '+ numReplaced + ' registros alterados');
    });

    db.stats.update({ work_id: wid }, { $inc: { plays: 1 }}, {multi: true, upsert: true}, function (err, numReplaced)
    {
        global.debug ('work stats: '+ numReplaced + ' registros alterados');
    });

    db.stats.update({ work_genre: genre }, { $inc: { plays: 1 }}, {multi: true, upsert: true}, function (err, numReplaced)
    {
        global.debug ('genre stats: '+ numReplaced + ' registros alterados');
    });

    db.stats.update({ composer_period: period }, { $inc: { plays: 1 }}, {multi: true, upsert: true}, function (err, numReplaced)
    {
        global.debug ('period stats: '+ numReplaced + ' registros alterados');
    });
}


global.worklist = function (cid, gid, search)
{
    $('#works').html('');
    $('#albums').html('');

    if (!search)
    {
        $('#worksearch').val('');
    }

    localStorage.lastgenre = gid;

    $('#genres li').removeClass('active');
    $('#'+global.slug(gid)).addClass('active');

    if (gid == 'all')
    {
        criteria = [{ work_composer: cid }, { work_genre: { $in: ['Chamber', 'Keyboard', 'Orchestral', 'Stage', 'Vocal'] } }];
    }
    else if (gid == 'fav')
    {
        criteria = [{ work_composer: cid }, { work_favorite: true, work_genre: { $in: ['Chamber', 'Keyboard', 'Orchestral', 'Stage', 'Vocal'] } }];
    }
    else
    {
        criteria = [{ work_composer: cid }, { work_genre: gid }];
    }

    if (search)
    {
        var buscaobra = new RegExp(search, 'i');
        criteria[criteria.length] = { work_title: { $regex: buscaobra } };
    }

    db.works.find({ $and: criteria }).sort({ work_title: 1 }).exec(function (err, docsw)
    {
        $('#works').html('');

        for (work in docsw)
        {
            favorite = '';
            if (docsw[work].work_favorite) { favorite = 'favorite'; }
            docsw[work].work_title = docsw[work].work_title.replace(/\"/g,"");
            $('#works').append('<li><a href="javascript:global.favoritework(\''+docsw[work].work_id+'\',\''+cid+'\')" class="wfav wfav_'+docsw[work].work_id+' '+favorite+'">fav</a><a href="javascript:global.albumlist(0,\''+docsw[work].work_id+'\',false,false,\''+docsw[work].work_title.replace(/\'/g,"\\\'")+'\');">'+docsw[work].work_title+'</a></li>');
        }

        if (sessionStorage.workscroll != undefined)
        {
            workscroll = JSON.parse(sessionStorage.workscroll);

            if (workscroll.composer == cid && workscroll.genre == gid)
            {
                $('#works').scrollTop(workscroll.scroll);
            }
        }
    });
}

S4 = function ()
{
    return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
}

guid = function ()
{
  return (S4() + S4() + "-" + S4() + "-4" + S4().substr(0,3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
}

global.radio = function (processid, cid, gid, age, favor, playlist_slug, seqplay, history)
{
    if (!processid)
    {
      processid = guid ();
    }
    // global.superdebug ("RADIO - dentro da funcao [process id: "+processid+"]");

    if (!$('#tuning-modal').is(':visible')) { $('#tuning-modal').leanModal(); }
    global.debug ("chamou o radio");
    global.debug (cid + ' ' + gid + ' ' + age + ' ' + favor)
    global.debug (typeof cid + ' ' + typeof gid + ' ' + typeof age + ' ' + typeof favor)

    global.concertmasterstatus.radio = true;

    $('#radiotop #goradio').removeClass('on');
    $('#radiotop #goradio').addClass('on');

    $('#playercontrols #skip').removeClass('radio');
    $('#playercontrols #skip').addClass('radio');

    // favoritos

    if (global.concertmasterstatus.favor && typeof favor == 'undefined')
    {
        favor = global.concertmasterstatus.favor;
    }

    if (global.concertmasterstatus.playlist_slug && typeof playlist_slug == 'undefined')
    {
        playlist_slug = global.concertmasterstatus.playlist_slug;
    }

    if (global.concertmasterstatus.history && typeof history == 'undefined')
    {
        history = global.concertmasterstatus.history;
    }

    if (global.concertmasterstatus.seqplay && typeof seqplay == 'undefined')
    {
        seqplay = global.concertmasterstatus.seqplay;
    }
    else if (seqplay)
    {
      global.debug ('apertou o botao de play');
      global.concertmasterstatus.seq = 0;
    }

    global.concertmasterstatus.favor = favor;
    global.concertmasterstatus.playlist_slug = playlist_slug;
    global.concertmasterstatus.seqplay = seqplay;
    global.concertmasterstatus.history = history;

    if (favor || history || playlist_slug || (gid != undefined && (cid != 'All' && cid != 'fav' && cid != 'wfav')))
    {
      $('#radiotop select.composers').val('All');
      $('#radiotop select.periods').val('All');
      $('#radiotop select.genres').val('All');

      $('#radiotop select.composers').trigger('change.select2');
      $('#radiotop select.periods').trigger('change.select2');
      $('#radiotop select.genres').trigger('change.select2');
    }

    if (global.concertmasterstatus.cid && !cid)
    {
        cid = global.concertmasterstatus.cid;
    }

    if (cid != 'All' && cid != 'fav' && cid != 'wfav')
    {
      global.concertmasterstatus.goradio = false;
    }

    if (favor)
    {
        // favoritos

        global.albumlist (processid, 0, true, true);
        global.concertmasterstatus.goradio = false;
    }
    else if (history)
    {
        // history

        global.albumlist (processid, false, true, false, '', '', '', playlist_slug, false, true);
        global.concertmasterstatus.goradio = false;
    }
    else if (playlist_slug)
    {
      global.concertmasterstatus.goradio = false;

      if (seqplay)
      {
        global.debug ('sequencial play');
        global.albumlist (processid, false, true, false, '', '', '', playlist_slug, true);
      }
      else
      {
        global.debug ('random play');
        global.albumlist (processid, false, true, false, '', '', '', playlist_slug, false);
      }
    }
    else
    {
        // epoca

        if (global.concertmasterstatus.age && !age)
        {
            age = global.concertmasterstatus.age;
        }

        if (global.concertmasterstatus.cid && !cid)
        {
            cid = global.concertmasterstatus.cid;
        }

        if (global.concertmasterstatus.gid && !gid)
        {
            gid = global.concertmasterstatus.gid;
        }

        global.concertmasterstatus.cid = cid;
        global.concertmasterstatus.gid = gid;
        global.concertmasterstatus.age = age;
        wfav = false;

        if (age != "All")
        {
            global.debug (age);

            andage_params = Array ();

            if (cid == "fav")
            {
                andage_params[andage_params.length] = { composer_id: { $in: window.favcomp } }
            }
            else if (cid == "wfav")
            {
                andage_params[andage_params.length] = { composer_id: { $in: window.favworkscomp } }
                wfav = true;
            }
            else
            {
              andage_params[andage_params.length] = { composer_id: { $nin: window.forbcomp } }
            }

            andage_params[andage_params.length] = { composer_period: age };

            global.debug (andage_params);

            db.works.find({ $and: andage_params }).exec (function (err, docsage)
            {
                random = Math.floor((Math.random() * eval(docsage.length-1)));

                if (docsage.length >= 1)
                {
                  // global.superdebug ("RADIO SORT - Epoca definida");
                  radiosort (docsage[random].composer_id, gid, wfav, processid);
                }
                else
                {
                    global.concertmasterstatus.radio = false;
                    global.norecordings();
                }
            });
        }
        else
        {
            // global.superdebug ("RADIO SORT - Todas as epocas");
            radiosort (cid, gid, false, processid);
        }

        function radiosort (cid, gid, wfav, processid)
        {
            // global.superdebug ("RADIO SORT - dentro da funcao [process id: "+processid+"]");
            and_params = Array ();
            or_params = Array ();

            // compositor

            forbade = false;

            if (cid != "All")
            {
                if (cid == "fav")
                {
                  and_params[and_params.length] = { work_composer: { $in: window.favcomp } };
                }
                else if (cid == "wfav")
                {
                  and_params[and_params.length] = { work_favorite: true };
                }
                else
                {
                  and_params[and_params.length] = { work_composer: cid };

                  if (wfav)
                  {
                    and_params[and_params.length] = { work_favorite: true };
                  }
                }
            }
            else
            {
              forbade = true;
              and_params[and_params.length] = { work_composer: { $nin: window.forbcomp } }
            }

            // genero

            if (gid != "All")
            {
                if (gid == "fav")
                {
                  and_params[and_params.length] = { work_favorite: true };
                }
                else
                {
                  and_params[and_params.length] = { work_genre: gid };
                }
            }

            // nao tem parametros

            if ((and_params.length <= 0 || and_params.length == 1 && forbade) && age == "All")
            {
                and_params = [{ work_id: { $exists: true } }];

                // smart radio, or parameters

                if (global.options.smartradio && window.compositoresprediletos.length > 0)
                {
                    var compositoresfavoritos = window.compositoresprediletos.concat(window.favcomp);
                    var obrasfavoritas = window.obrasprediletas.concat(window.favworks);

                    smartrandom = Math.floor((Math.random() * 6)) + 1;

                    if (smartrandom <= 3)
                    {
                      // 3/6 das vezes sorteia obras de generos favoritos de compositores favoritos

                      and_params[and_params.length] = { work_composer: { $in: compositoresfavoritos } };
                      and_params[and_params.length] = { work_genre: { $in: window.generosprediletos } };

                      global.debug ('COMPOSITOR FAVORITO');
                    }
                    else if (smartrandom >= 4 && smartrandom <= 5)
                    {
                      // 2/6 das vezes sorteia obras favoritas

                      and_params[and_params.length] = { work_id: { $in: obrasfavoritas } };

                      global.debug ('OBRA FAVORITA');
                    }
                    else if (smartrandom == 6)
                    {
                      // 1/6 das vezes sorteia obras de generos favoritos

                      and_params[and_params.length] = { work_genre: { $in: window.generosprediletos } };
                      and_params[and_params.length] = { work_composer: { $nin: window.forbcomp } };

                      global.debug ('GENERO FAVORITO');
                    }
                }
                else
                {
                  and_params[and_params.length] = { work_composer: { $nin: window.forbcomp } };
                }
            }

            // elimina obras anteriores

            if (global.concertmasterstatus.radioworks.length > 0)
            {
                and_params[and_params.length] = { work_id: { $nin: global.concertmasterstatus.radioworks } };
            }

            params = { $and: and_params };
            global.debug (params);

            /*if (or_params.length > 0)
            {
                //params = { $or: or_params, $and: and_params };
                //params = { $and: or_params };
                //params = { $and: [{ work_genre: { $in: ["Orchestral","Keyboard"] }}, { work_composer: { $in: ["13918","3422","6220","2320","2694"] } }] };
                //params = { work_composer: { $in: global.listenstats["composer_id"] } };
            }
            else
            {
                params = { $and: and_params };
            }*/

            global.debug ('RADIO');
            global.debug (global.concertmasterstatus.radioworks);
            global.debug (params);

            db.works.count(params).exec(function (err, count)
            {
                global.debug (count);

                global.debug (err);
                global.debug (count);

                if (count >= 1)
                {
                    random = Math.floor((Math.random() * count));

                    db.works.find(params).skip(random).limit(1).exec(function (err, doc)
                    {
                        global.debug (doc[0].work_id);
                        // global.superdebug ("ALBUM LIST - dentro de global.radio - " + doc[0].work_id);
                        global.albumlist (processid, doc[0].work_id, true);
                    });
                }
                else
                {
                    global.concertmasterstatus.radiotentativas++;
                    global.debug (global.concertmasterstatus.radiotentativas);

                    if (global.concertmasterstatus.radiotentativas > 10)
                    {
                        global.debug ("apagando a lista, linha 1748");
                        global.concertmasterstatus.radiotentativas = 0;
                        global.concertmasterstatus.supertentativas++;
                        global.concertmasterstatus.radioworks = Array ();
                    }

                    global.debug (global.concertmasterstatus.supertentativas);

                    if (global.concertmasterstatus.supertentativas > 1)
                    {
                      global.concertmasterstatus.supertentativas = 0;
                      global.concertmasterstatus.radio = false;
                      global.norecordings();
                    }
                    else
                    {
                      // global.superdebug ("RADIO - 2122 - passou das tentativas e nao encontrou mais gravacoes");
                      global.radio (processid);
                    }
                }
            });
        }

    }
}

global.playingdetails = function ()
{
    if (document.getElementById('nowplaying').className == 'up')
    {
        document.getElementById('nowplaying').className = 'down';
    }
    else
    {
        document.getElementById('nowplaying').className = 'up';
    }
}

global.readabletime = function(time)
{
    if (time && time > 0.0)
    {
        var sec = parseInt(time % 60);
        return parseInt(time / 60) + ':' + (sec < 10 ? '0'+sec : sec);
    }
    else
    {
        return '0:00';
    }
}

global.autoslider = function ()
{
	global.concertmasterstatus.spotippos = global.concertmasterstatus.spotippos + 1;

	global.slider ([global.concertmasterstatus.spotippos,global.concertmasterstatus.spotilen]);
}

global.slider = function (arg)
{
		if (arg[0]/arg[1] <= 1)
		{
	    global.concertmasterstatus.currentpoint = global.concertmasterstatus.currentpoint+1;
	    $("#timer-"+global.concertmasterstatus.trindex).html(global.readabletime(arg[0]));
	    $("#globaltimer-"+global.concertmasterstatus.trindex).html(global.readabletime(arg[0]));
	    $("#timerglobal").html(global.readabletime(global.concertmasterstatus.acclength[global.concertmasterstatus.trindex]+arg[0]));
	    $("#slider-"+global.concertmasterstatus.trindex).find('.bar').css('width', (100*arg[0]/arg[1]) + '%');
	    $("#globalslider-"+global.concertmasterstatus.trindex).find('.bar').css('width', (100*arg[0]/arg[1]) + '%');
		}
		else if (global.concertmasterstatus.trindex == eval(global.concertmasterstatus.tracks)-1)
		{
			if (global.concertmasterstatus.spotitimer)
			{
				clearInterval (global.concertmasterstatus.spotitimer);
			}

			global.debug ("acabou mas o spotify nao avisou");

			$("#timer-"+global.concertmasterstatus.trindex).html(global.readabletime(0));
			$("#globaltimer-"+global.concertmasterstatus.trindex).html(global.readabletime(0));
			$("#slider-"+global.concertmasterstatus.trindex).find('.bar').css('width', '0%');
			$("#globalslider-"+global.concertmasterstatus.trindex).find('.bar').css('width', '0%');

			$(".timer").html('0:00');
			$("#timerglobal").html('0:00');
			global.concertmasterstatus.stopped = true;
			$('#playpause').toggleClass("play");
			$('#playpause').toggleClass("pause");

			global.traymenu.items[2].label = "Play";

			if (process.platform == 'darwin')
			{
        global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play@2x.png'));
			}
			else
			{
        global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play.png'));
			}

			/*if (global.concertmasterstatus.radio)
			{
					// global.superdebug ("RADIO - Spotify terminou a faixa");
					global.radio (0);
			}*/
		}
}

global.playtrack = function (tind)
{
    $(".slider").find('.bar').css('width', '0%');
    $(".slider").find('.buffer').css('width', '0%');
    $(".timer").html('0:00');

    global.concertmasterstatus.stopped = false;

			if (global.concertmasterstatus.spotifyclient == true || true)
			{
				global.presspause ();

				if (global.concertmasterstatus.spotitimer)
				{
					clearInterval (global.concertmasterstatus.spotitimer);
				}

				global.concertmasterstatus.spotitrids = global.concertmasterstatus.trids.slice (tind);
				newtrids = global.concertmasterstatus.trids.slice (tind).join ();
				global.debug ("chamei o Spotify na linha 405");

        // global.superdebug ("SPOTIFY WIDGET - 2309 - rodei tracks "+newtrids);

				//window.frames["spotiplayeriframe"].contentWindow.SPR.playSpotifyURI("spotify:trackset:Concertmaster:"+newtrids);


        window.frames["spotiplayeriframe"].contentWindow.SPR.playSpotifyURI("spotify:track:0trIWT17aIBpLpelCRTUIQ");

				global.concertmasterstatus.spotitimer = setInterval(global.autoslider, 1000);
				//window.frames["spotiplayeriframe"].contentWindow.SPR.playPauseCurrent();
			}
			else
			{
				global.spotifyerror ();
			}
}

global.nexttrack = function ()
{
    if (global.concertmasterstatus.trindex + 1 < global.concertmasterstatus.tracks)
    {
        global.playtrack (global.concertmasterstatus.trindex + 1);
    }
    else if (global.concertmasterstatus.radio)
    {
        // global.superdebug ("RADIO - 312 - apertou o next");
        global.radio (0);
    }
}

global.skiptrack = function ()
{
    if (global.concertmasterstatus.radio)
    {
        if ($('#playpause').hasClass("pause"))
        {
          global.playpause ();
        }
        // global.superdebug ("RADIO - 2263 - apertou o skip");
        global.radio (0);
    }
}

global.prevtrack = function ()
{
    if (global.concertmasterstatus.trindex - 1 >= 0)
    {
        global.playtrack (global.concertmasterstatus.trindex - 1);
    }
    else
    {
				global.seek (0);
				global.concertmasterstatus.spotitimer = setInterval(global.autoslider, 1000);
    }
}

global.seek = function (pos)
{
				if (global.concertmasterstatus.spotitimer)
				{
					clearInterval (global.concertmasterstatus.spotitimer);
				}
        window.frames["spotiplayeriframe"].contentWindow.SPR.setPlayPosition(pos);
}

global.toggleplaypause = function ()
{
	$('#playpause').toggleClass("play");
	$('#playpause').toggleClass("pause");

	if ($('#playpause').hasClass("play"))
	{
			global.traymenu.items[2].label = "Play";
			if (process.platform == 'darwin')
			{
        global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play@2x.png'));
			}
			else
			{
        global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play.png'));
			}
	}
	else
	{
			global.traymenu.items[2].label = "Pause";

			if (process.platform == 'darwin')
			{
        global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_pause@2x.png'));
			}
			else
			{
        global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_pause.png'));
			}
	}
}

global.playpause = function ()
{
				if (global.concertmasterstatus.spotitimer)
				{
					clearInterval (global.concertmasterstatus.spotitimer);
				}

				if (global.concertmasterstatus.stopped)
				{
					if (global.concertmasterstatus.spotifyclient == true || true)
					{
						global.toggleplaypause ();
						global.debug ("chamei o spotify na linha 293");

            //// global.superdebug ("SPOTIFY WIDGET - 2413 - rodei tracks "+spotrids+" [process id: "+processid+"]");

						//window.frames["spotiplayeriframe"].contentWindow.SPR.playSpotifyURI("spotify:trackset:Concertmaster:"+spotrids);
            window.frames["spotiplayeriframe"].contentWindow.SPR.playSpotifyURI("spotify:track:0trIWT17aIBpLpelCRTUIQ");

						global.concertmasterstatus.stopped = false;
						global.concertmasterstatus.spotitimer = setInterval(global.autoslider, 1000);
					}
					else
					{
						global.spotifyerror ();
					}
				}
				else
				{
					if (global.concertmasterstatus.spotifyclient == true || true)
					{
						global.toggleplaypause ();
						window.frames["spotiplayeriframe"].contentWindow.SPR.playPauseCurrent();
					}
					else
					{
						global.spotifyerror ();
					}
				}
}

global.stop = function ()
{
    global.concertmasterstatus.stopped = true;

    $('#playpause').removeClass("pause");
    $('#playpause').addClass("play");

		$(".slider").find('.bar').css('width', '0%');
    $(".slider").find('.buffer').css('width', '0%');
    $(".timer").html('0:00');
		$("#timerglobal").html('0:00');

		global.traymenu.items[2].label = "Play";
		if (process.platform == 'darwin')
		{
      global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play@2x.png'));
		}
		else
		{
      global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play.png'));
		}

				if (global.concertmasterstatus.spotitimer)
				{
					clearInterval (global.concertmasterstatus.spotitimer);
				}

				if (global.concertmasterstatus.spotifyclient)
				{
					window.frames["spotiplayeriframe"].contentWindow.SPR.pauseSong();
				}
}

global.presspause = function ()
{
	$('#playpause').removeClass("play");
	$('#playpause').addClass("pause");

	global.traymenu.items[2].label = "Pause";

	if (process.platform == 'darwin')
	{
    global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_pause@2x.png'));
	}
	else
	{
    global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_pause.png'));
	}
}

global.notification = function (info, auto)
{
    var infor = info.match(/<li class="cover"><a href="(.*?)"><img src="(.*?)" onerror="(.*?)" \/><div class="overlay"><\/div><\/a><\/li><li class="composer"><a href="(.*?)">(.*?)<\/a><\/li><li class="work"><a href="(.*?)">(.*?)<\/a><\/li>/);
    global.debug (infor);

    if (!auto && ('Notification' in window))
    {
        var notification;
        notification = new Notification(infor[5], {
          tag: 'notification',
          body: infor[7],
          iconUrl: '',
          icon: infor[2],
          silent: true
        });
    }

    if (!global.concertmasterstatus.radio)
    {
      ga('send', {
        hitType: 'pageview',
        page: global.options.version+'/play/'+encodeURI(infor[5])+'/'+encodeURI(infor[7])+'/'+encodeURI(global.concertmasterstatus.lastpid)
      });
    }

    global.traymenu.items[0].label = infor[5] + ': ' + infor[7];
    global.tray.setToolTip(infor[5] + ': ' + infor[7]);

    if ($('#playpause').hasClass("play"))
    {
        global.traymenu.items[2].label = "Play";

				if (process.platform == 'darwin')
				{
          global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play@2x.png'));
				}
				else
				{
          global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_play.png'));
				}
    }
    else
    {
        global.traymenu.items[2].label = "Pause";

				if (process.platform == 'darwin')
				{
          global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_pause@2x.png'));
				}
				else
				{
          global.tray.setImage(path.join(remote.app.getAppPath(), 'img/trayicon_pause.png'));
				}
    }
}

global.lastplay = function ()
{
    global.concertmasterstatus.stopped = true;

    if (localStorage.last && remote.process.argv[(remote.process.argv.length-1)].search(/concertmaster\:/i) == -1)
    {
        // global.superdebug ("ALBUM - abrindo o concertmaster - " + localStorage.last.split(",")[0]);
        global.album (0,false,localStorage.last.split(",")[0], localStorage.last.split(",")[1], localStorage.last.split(",")[2], localStorage.lasttrackset, true);

        global.playerinfo[localStorage.last.split(",")[1]] = localStorage.lastplayer;
    }
}

global.addfavorite = function (pid, workname)
{
    global.debug (pid);
    if ($('.fav_'+pid).hasClass('is'))
    {
        add = false;
    }
    else if ($('.fav_'+pid).hasClass('go'))
    {
        add = true;
    }

    global.debug ('favorito tirar ou colocar: ' + add);

    db.recordings.update({ performance_id: pid }, { $set: { favorite: add, "work.name": workname }}, {multi: true}, function (err, numReplaced)
    {
        global.debug ('adicionei '+numReplaced+' gravacao a lista de favoritos');

        if ($('#favtitle select').val() == "0")
        {
          $('#favalbums').html('');
          global.albumlist (0, '',false,true);
        }
    });

    if (add)
    {
        $('.fav_'+pid).removeClass('go');
        $('.fav_'+pid).addClass('is');
    }
    else
    {
        $('.fav_'+pid).removeClass('is');
        $('.fav_'+pid).addClass('go');
    }
}

global.addhist = function (pid, workname)
{
    //console.log ('history:'+ pid);

    db.recordings.update({ performance_id: pid }, { $set: { lastplayed: Date.now(), "work.name": workname }}, {multi: true}, function (err, numAffected)
    {
        //console.log ('adicionei '+numAffected+' no historico');

        if ($('#favtitle select').val() == "9999999999")
        {
          $('#favalbums').html('');
          global.albumlist (0, false, false, false, '', '', '', '9999999999', false, true);
        }
    });
}

global.permalink = function (wid, pid)
{
    const {clipboard} = require('electron');
    clipboard.writeText(global.options.shareurl+'/t/'+(wid).toString(16)+'/'+(pid).toString(16));
    $('#permalink-modal').leanModal();
}

global.openurl = function (cmdline)
{
    vars = cmdline.split("/");
    if (vars[2] == "p")
    {
      pidlist = new Array;
      for (p in vars)
      {
        if (p > 3) pidlist[p] = parseInt(vars[p], 16);
      }
      var playlist_name = vars[3];
      playlist_name = playlist_name.replace(/_/g, " ");
      global.playlistlist (pidlist, decodeURI (playlist_name));
    }
    else
    {
      global.albumlist (0, parseInt(vars[2], 16), false, false, '', parseInt(vars[3], 16));
    }
}

global.playlistshare = function (playlist_slug)
{
  const {clipboard} = require('electron');
  var performances = $('#favalbums').children().get();
  var pids = [];

  for (p in performances)
  {
      pids[p] = Number($(performances[p]).attr("pid")).toString(16);
  }

  var playlist = window.playlistsnames[window.playlistsslugs.lastIndexOf(playlist_slug)];
  playlist = playlist.replace (/ /g, "_");
  clipboard.writeText(global.options.shareurl+'/p/'+encodeURI(playlist)+'/'+pids.join('/'));
  $('#playlistshare-modal').leanModal();
}

global.initdb = function (action, version)
{
    if (action == "install")
    {
				$('#tuning-modal').hide();
        $('#initialsetup h2').html('Welcome');
    }
    else if (action == "update")
    {
				$('#tuning-modal').hide();
        $('#update-library-confirm').css({"display":"none"});
        $('#initialsetup h2').html('Update');
        db.works.remove({ _id: { $exists: true } }, { multi: true}, function (err, num)
        {
            //global.debug ('removed: '+ num);
        });
    }

		$('#tuning-modal').hide();
    $('#initialaction').html('Downloading');
    $('#initialsetup').leanModal();

    http.get(global.options.backend+'/database/db.json').on('response', function (response)
    {
        global.debug ('linha 2462, initdb');
        global.debug (global.options.backend+'/database/db.json');

        bar = statusBar.create ({ total: response.headers["content-length"] }).on ("render", function (stats)
        {
            $("#initialsetupbar").find('.bar').css('width', this.format.percentage (stats.percentage));
        });

        response.pipe (bar);

        var body = '';
        var finished = false;

        response.on('data', function (chunk) {
            body += chunk;

            if (finished)
            {
                try
                {
                    initialdata = JSON.parse (body);
                    /*tamanho = initialdata.length;
                    idt = 0;

                    $("#initialsetupbar").find('.bar').css('width', 0);
                    $('#initialaction').html('Installing');

                    for (doc in initialdata)
                    {
                        db.works.insert(initialdata[doc], function (err, newDoc)
                        {
                            idt++;
                            $("#initialsetupbar").find('.bar').css('width', eval(idt/tamanho)*100 + '%');

                            if (idt == tamanho)
                            {
                                $('#initialsetup').css({"display":"none"});
                                global.composers ('all');
                                global.genres ('2156', 'Beethoven');

                                localStorage.libraryversion = version;

                                if (action == "install") { $('#tuning-modal').hide(); $('#lean_overlay').css({"display":"none"}); }
                                if (action == "update") { $('#lean_overlay').css({"display":"none"}); }
                            }
                        });
                    }*/

                    db.works.insert(initialdata, function (err, newDoc)
                    {
                      $('#initialsetup').css({"display":"none"});

                      global.composers ('all');
                      global.genres ('2156', 'Beethoven');

                      localStorage.libraryversion = version;

                      if (action == "install") { $('#tuning-modal').hide(); $('#lean_overlay').css({"display":"none"}); }
                      if (action == "update") { $('#lean_overlay').css({"display":"none"}); }
                    });
                }
                catch(err)
                {
                    global.connectionerror ();
                }
            }
        });

        bar.on('finish', function ()
        {
            finished = true;
        });

    }).on ("error", function (error)
    {
        if (bar) bar.cancel ();
        global.connectionerror();
    });
}

global.installversion = function ()
{
	global.initdb ('install', sessionStorage.latestlibrary);
}

global.checkversion = function ()
{
    if (sessionStorage.latestlibrary != undefined && sessionStorage.latestsoftware != undefined && sessionStorage.latestlibrary != "error" && sessionStorage.latestsoftware != "error" && sessionStorage.latestlibrary != "undefined" && sessionStorage.latestsoftware != "undefined")
    {
        if (localStorage.libraryversion != sessionStorage.latestlibrary)
        {
            $('#update-library-confirm').leanModal();
        }
        else if (remote.app.getVersion() != sessionStorage.latestsoftware)
        {
            atualiza = false;
            lvers = sessionStorage.latestsoftware.split('.');
            avers = remote.app.getVersion().split('.');

            if (Number(lvers[0]) > Number(avers[0]))
            {
              atualiza = true;
            }
            else if (Number(lvers[0]) == Number(avers[0]) && Number(lvers[1]) > Number(avers[1]))
            {
              atualiza = true;
            }
            else if (Number(lvers[0]) == Number(avers[0]) && Number(lvers[1]) == Number(avers[1]) && Number(lvers[2]) > Number(avers[2]))
            {
              atualiza = true;
            }

            if (atualiza)
            {
              clog = sessionStorage.changelog.split('|');
              $('#changelog').html("<li>"+clog.join("</li><li>")+"</li>");
              $('#update-software-confirm').leanModal();
            }
        }
    }
}

global.playlist = function ()
{
  if ($('#playlistmodal #newplaylist').val() != "")
  {
    global.playlistperformance (window.playlistpid, $('#playlistmodal #newplaylist').val(), 1);
  }
  else if ($('#playlistmodal #existingplaylist').val() != "0")
  {
    global.playlistperformance (window.playlistpid, $('#playlistmodal #existingplaylist').val(), 1);
  }
}

global.connectionerror = function ()
{
    if (global.concertmasterstatus.radio)
    {
        // global.superdebug ("RADIO - erro de conexao - 2827");
        global.radio (0);
    }
    else
    {
		    $('#tuning-modal').hide();
        $("#connectionerror").leanModal();
    }
}

global.editplaylist = function (playlist_slug)
{
  $('#playlist_newname').val(window.playlistsnames[window.playlistsslugs.lastIndexOf(playlist_slug)]);

  window.editplaylist_slug = playlist_slug;
  $('#tuning-modal').hide();
  $('#toggle_delpl').toggles(false);
  $("#editplaylistmodal").leanModal();
}

global.renameplaylist = function (playlist_name)
{
  var playlist_slug = window.editplaylist_slug;
  var performances = $('#favalbums').children().get();
  var active = Array ();
  var pica = 0;

  if (global.slug(playlist_name) != playlist_slug)
  {
    for (p in performances)
    {
        var pid = $(performances[p]).attr("pid");
        var pidsort = $(performances[p]).attr("pidsort");

        var playlistarray = { playlist_slug: global.slug(playlist_name), playlist_name: playlist_name, playlist_position: Number(pidsort) };

        db.recordings.update({ performance_id: Number(pid) }, { $push: { performance_playlists: playlistarray } }, { returnUpdatedDocs: true }, function (err, numAffected, affectedDocuments)
        {
          var pid = affectedDocuments.performance_id;

          db.recordings.update({ performance_id: Number(pid) }, { $pull: { performance_playlists: { playlist_slug: playlist_slug } } }, { returnUpdatedDocs: true }, function (err, numAffected, affectedDocuments)
          {
            global.listplaylists (global.slug(playlist_name));
            $('#editplaylistmodal').closeModal();
          });
        });
    }
  }
  else
  {
      $('#editplaylistmodal').closeModal();
  }
}

global.deleteplaylist = function ()
{
  var playlist_slug = window.editplaylist_slug;

  db.recordings.update({ "performance_playlists.playlist_slug": playlist_slug }, { $pull: { performance_playlists: { playlist_slug: playlist_slug } } }, { multi: true }, function (err, numAffected, affectedDocuments)
  {
    global.albumlist (0, false,false,true);
    $('#editplaylistmodal').closeModal();
    $('#toggle_delpl').toggles(false);
  });
}

global.playlistmodal = function (pid)
{
    $('#playlistmodal #existingplaylist').html('');
    var favoptions = Array ();
    for (pl in window.playlistsslugs)
    {
       favoptions[window.playlistsslugs[pl]] = new Option(window.playlistsnames[pl], window.playlistsnames[pl]);
    }

    var favoption = new Option("Choose a playlist", "0");
    $('#playlistmodal #existingplaylist').append($(favoption));

    var favoptproxy = Array ();
    for (ops in favoptions)
    {
      favoptproxy.push (ops);
    }

    favoptproxy.sort();

    for (op in favoptproxy)
    {
      $('#playlistmodal #existingplaylist').append($(favoptions[favoptproxy[op]]));
    }

    $('#playlistmodal #newplaylist').val('');
    window.playlistpid = pid;
		$('#tuning-modal').hide();
    $("#playlistmodal").leanModal();
}

global.norecordings = function ()
{
		$('#tuning-modal').hide();
    $("#norecordings").leanModal();

    $('#radiotop #goradio').removeClass('on');
    $('#playercontrols #skip').removeClass('radio');
}

global.moveplaylist = function (ui)
{
  var playlist_slug = $('#favtitle select').val();
  var performances = $('#favalbums').children().get();
  var active = Array ();
  var pica = 0;

  for (p in performances)
  {
      var pid = $(performances[p]).attr("pid");

      db.recordings.update({ performance_id: Number(pid) }, { $pull: { performance_playlists: { playlist_slug: playlist_slug } } }, { returnUpdatedDocs: true }, function (err, numAffected, affectedDocuments)
      {
        pica++;

        var pid = affectedDocuments.performance_id;
        var playlistarray = { playlist_slug: playlist_slug, playlist_name: window.playlistsnames[window.playlistsslugs.lastIndexOf(playlist_slug)], playlist_position: Number(pica) };

        db.recordings.update({ performance_id: Number(pid) }, { $push: { performance_playlists: playlistarray } }, {  }, function (err)
        {

        });
      });
  }
}

global.spotifyerror = function ()
{
		$('#tuning-modal').hide();
    $("#spotifyerror").leanModal();
}

global.notavailable  = function ()
{
		$('#tuning-modal').hide();
    $("#notavailable").leanModal();
}

global.help = function ()
{
    const {shell} = require('electron');
    shell.openExternal(global.options.publicsite+'/help');
}

global.downloadlatest = function ()
{
    const {shell} = require('electron');

    if (process.platform == 'darwin')
    {
        shell.openExternal(global.options.publicsite+'/latest/?os=mac');
    }
    else if (process.platform == 'linux')
    {
        shell.openExternal(global.options.publicsite+'/latest/?os=linux');
    }
    else
    {
        shell.openExternal(global.options.publicsite+'/latest/?os=win');
    }

    $('#update-software-confirm').closeModal();
}

global.listplaylists = function (playlist_slug)
{
  $('#favtitle select').css('visibility', 'hidden');

  if (!playlist_slug || playlist_slug == "0")
  {
      playlist_slug = "0";
      $('#sidebar').removeClass('sequenplay');
  }
  else if (playlist_slug == "9999999999")
  {
    playlist_slug = "9999999999";
    $('#sidebar').removeClass('sequenplay');
  }
  else
  {
    $('#sidebar').addClass('sequenplay');
  }

  db.recordings.find({ performance_playlists: { $exists: true} }, function (err, docs)
  {
    $('#favtitle select').html('');
    var favoptions = Array ();
    window.playlistsslugs = Array ();
    window.playlistsnames = Array ();

    for (dc in docs)
    {
      for (pl in docs[dc].performance_playlists)
      {
         window.playlistsslugs.push(docs[dc].performance_playlists[pl].playlist_slug);
         window.playlistsnames.push(docs[dc].performance_playlists[pl].playlist_name);
         favoptions[docs[dc].performance_playlists[pl].playlist_slug] = new Option(docs[dc].performance_playlists[pl].playlist_name, docs[dc].performance_playlists[pl].playlist_slug);
      }
    }

    var favoption = new Option("Favorites", "0");
    $('#favtitle select').append($(favoption));

    var favoption = new Option("Recently Played", "9999999999");
    $('#favtitle select').append($(favoption));

    var favoptproxy = new Array ();

    for (ops in favoptions)
    {
      favoptproxy.push (ops);
    }

    favoptproxy.sort();

    for (op in favoptproxy)
    {
      $('#favtitle select').append($(favoptions[favoptproxy[op]]));
    }

    $('#favtitle select').val(playlist_slug);
    $('#favtitle select option:checked').text($('#favtitle select option:checked').text().toUpperCase());
    $('#favtitle select').css('visibility', 'visible');

  });
}

global.playlistlist = function (list, playlist)
{
  var playlistarray = { playlist_slug: global.slug(playlist), playlist_name: playlist, playlist_position: 1 };

  db.recordings.update({ performance_id: { $in: list }}, { $addToSet: { performance_playlists: playlistarray } }, { multi: true }, function (err)
  {
    global.albumlist (0,false,false,false,'','','',global.slug(playlist));
  });
}

global.playlistperformance = function (pid, playlist, position)
{
  var playlistarray = { playlist_slug: global.slug(playlist), playlist_name: playlist, playlist_position: Number(position) };

  db.recordings.update({ performance_id: Number(pid) }, { $addToSet: { performance_playlists: playlistarray } }, { multi: true }, function (err)
  {
    global.albumlist (0,false,false,false,'','','',global.slug(playlist));
    $('#playlistmodal').closeModal();
  });
}

global.unplaylistperformance = function (pid, playlist_slug)
{
  db.recordings.update({ performance_id: Number(pid) }, { $pull: { performance_playlists: { playlist_slug: playlist_slug } } }, { multi: true }, function (err)
  {
      if ($('#favtitle select').val() == playlist_slug)
      {
        global.albumlist (0,false,false,false,'','','',playlist_slug);

        db.recordings.count({ "performance_playlists.playlist_slug": playlist_slug }, function (err, count)
        {
          if (count <= 0)
          {
            global.albumlist (0,false,false,true);
          }
        });
      }
  });
}

global.favoritecomposer = function (cid)
{
  if ($('.cfav_'+cid).hasClass('favorite'))
  {
    cadd = false;
  }
  else
  {
    cadd = true;
  }

  db.works.update({ composer_id: cid }, { $set: { composer_favorite: cadd } }, { }, function (err)
  {
    $('.cfav_'+cid).toggleClass('favorite');

    if ($('#composers li.index').hasClass('favorite'))
    {
        global.composers ('fav');
    }

    global.setfavcomp ();
  });
}

global.forbiddencomposer = function (cid)
{
  if ($('.forb_'+cid).hasClass('forbidden'))
  {
    fadd = false;
  }
  else
  {
    fadd = true;
  }

  db.works.update({ composer_id: cid }, { $set: { composer_forbidden: fadd } }, { }, function (err)
  {
    $('.forb_'+cid).toggleClass('forbidden');

    global.setforbcomp ();
  });
}

global.favoritework = function (wid, cid)
{
  if ($('.wfav_'+wid).hasClass('favorite'))
  {
    wadd = false;
  }
  else
  {
    wadd = true;
  }

  db.works.update({ work_id: wid }, { $set: { work_favorite: wadd } }, { }, function (err)
  {
    $('.wfav_'+wid).toggleClass('favorite');

    if ($('#genres li#fav').hasClass('active'))
    {
        global.worklist (cid, 'fav');
    }

    global.setfavworks ();
  });
}

global.getspapitoken = function (callback)
{
  tsnow = Math.floor(new Date().getTime() / 1800000);
  if (tsnow > localStorage.spapitokents || !localStorage.spapitoken)
  {
    request({url:global.options.backend+'/spotifyauth/'+tsnow+'-'+Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5)+'.json', json: false, timeout: global.options.timeout}, function (error, response, spapitoken)
    {
      localStorage.spapitokents = tsnow;
      localStorage.spapitoken = spapitoken;

      callback ('0', 'OK', spapitoken);
    });
  }
  else
  {
    callback ('0', 'OK', localStorage.spapitoken);
  }
}

global.makedump = function ()
{
  db.recordings.find({ favorite: true }, function (err, docs)
  {
    dump = new Object;
    dump.ts = Math.floor(new Date().getTime() / 1800000);

    dump.works = new Object;
    dump.works.needed = new Array;
    dump.favoriterecordings = new Array;

    for (dc in docs)
    {
      dump.favoriterecordings.push (docs[dc].performance_id.toString());
      dump.works.needed.push (docs[dc].work_id.toString());
    }

    dump.composers = new Object;
    dump.composers.favorite = window.favcomp;
    dump.composers.forbidden = window.forbcomp;

    dump.works.favorite = window.favworks;

    dump.playlists = new Array;
    dump.playlists_idx = new Array;
    playlistsslugss = new Array;

    for (pn in window.playlistsslugs)
    {
      if (playlistsslugss.indexOf (window.playlistsslugs[pn]) === -1)
      {
        playlistsslugss[pn] = window.playlistsslugs[pn];

        dump.playlists[dump.playlists.length] = new Object;
        dump.playlists[dump.playlists.length-1].recordings = new Array;
        dump.playlists[dump.playlists.length-1].name = window.playlistsnames[pn];
        dump.playlists[dump.playlists.length-1].slug = window.playlistsslugs[pn];

        dump.playlists_idx[dump.playlists.length-1] = window.playlistsslugs[pn];
      }
    }

    global.dumpplaylists (dump);
  });
}

global.dumpplaylists = function (dump)
{
  db.recordings.find({ "performance_playlists.playlist_slug": { $in: window.playlistsslugs } }, function (err, docs)
  {
    for (dc in docs)
    {
      for (ppp in docs[dc].performance_playlists)
      {
        dump.works.needed.push (docs[dc].work_id.toString());
        dump.playlists[dump.playlists_idx.indexOf(docs[dc].performance_playlists[ppp].playlist_slug)].recordings[dump.playlists[dump.playlists_idx.indexOf(docs[dc].performance_playlists[ppp].playlist_slug)].recordings.length] = docs[dc].performance_id.toString();
      }
    }

    global.dumplastplayed (dump);
  });
}

global.dumplastplayed = function (dump)
{
  dump.lastplayed = new Array;

  db.recordings.find({ lastplayed: { $gte: Date.now()-(10*24*60*60*1000) } }, function (err, docs)
  {
    for (dc in docs)
    {
      dump.works.needed.push (docs[dc].work_id.toString());

      dump.lastplayed[dump.lastplayed.length] = new Object;

      dump.lastplayed[dump.lastplayed.length-1].recording = docs[dc].performance_id.toString();
      dump.lastplayed[dump.lastplayed.length-1].lastplayed = docs[dc].lastplayed.toString();
    }

    global.dumpstats (dump);
  });
}

global.dumpstats = function (dump)
{
  dump.stats = new Array;
  db.stats.find({}, { _id: 0 }).exec(function (err, docs)
  {
    dump.stats = docs;

    global.dumpworks (dump);
  });
}

global.dumpworks = function (dump)
{
  workdump = new Object;
  workdump.ts = Math.floor(new Date().getTime() / 1800000).toString ();

  db.recordings.find({ work_id: { $in: dump.works.needed }}, { _id: 0 }, function (err, docs)
  {
    workdump.works = docs;

    global.archivedump (dump, workdump, workdump.ts);
  });
}

global.archivedump = function (dump, workdump, dumpts)
{
  var output = fs.createWriteStream (path.join (remote.app.getPath('userData'), 'writedump.zip'));
  var archive = archiver ('zip', { zlib: { level: 9 } });

  output.on('close', function()
  {
    console.log(archive.pointer() + ' total bytes');
    console.log('archiver has been finalized and the output file descriptor has closed.');
    global.uploaddump (dumpts);
  });

  output.on('end', function()
  {
    console.log('Data has been drained');
  });

  archive.on('warning', function(err)
  {
    if (err.code === 'ENOENT') {
      // log warning
    } else {
      // throw error
      throw err;
    }
  });

  archive.pipe(output);
  archive.append(JSON.stringify (dump), { name: 'dump.txt' });
  archive.append(JSON.stringify (workdump), { name: 'workdump.txt' });
  archive.finalize();
}

global.uploaddump = function (dumpts)
{
    console.log (dumpts);
    var uploaddata = fs.readFileSync (path.join (remote.app.getPath('userData'), 'writedump.zip'));

    var crlf = "\r\n",
        boundaryKey = Math.random().toString(16),
        boundary = `--${boundaryKey}`,
        delimeter = `${crlf}--${boundary}`,
        headers = [
          'Content-Disposition: form-data; name="uuid"' + crlf,
          'Content-Disposition: form-data; name="ts"' + crlf,
          'Content-Disposition: form-data; name="file"; filename="complete.zip"' + crlf
        ],
        closeDelimeter = `${delimeter}--`,
        multipartBody;

    var multipartBody = Buffer.concat([
        new Buffer(delimeter + crlf + headers[0] + crlf),
        new Buffer(localStorage.uuid),
        new Buffer(delimeter + crlf + headers[1] + crlf),
        new Buffer(dumpts),
        new Buffer(delimeter + crlf + headers[2] + crlf),
        uploaddata,
        new Buffer(closeDelimeter)]
    );

    var options = {
      host: global.options.backendhost,
      path: '/dump.php',
      method: 'POST',
      headers: {
          //'Content-Type': 'application/x-www-form-urlencoded',
          'Content-Type': 'multipart/form-data; boundary=' + boundaryKey,
          'Content-Length': multipartBody.length
        }
    };

    var req = http.request(options, function(res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
              console.log(JSON.parse (chunk));
              //console.log (chunk);
        });
    });

    req.setHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);
    req.setHeader('Content-Length', multipartBody.length);
    req.write(multipartBody);
    req.end();
}

global.downloaddump = function ()
{
    var uri = global.options.backend + '/dump/' + localStorage.uuid + '/complete.zip';
    request.head (uri, function (err, res, body)
    {
        var r = request(uri).pipe(fs.createWriteStream(remote.app.getPath('userData') + '/readdump.zip'));
        r.on('close', global.unarchivedump);
    });
};

global.unarchivedump = function ()
{
  var unzipper = new DecompressZip (remote.app.getPath('userData') + '/readdump.zip');

  unzipper.on('error', function (err) {
      console.log('Caught an error');
  });

  unzipper.on('extract', function (log) {
      var vardump = JSON.parse (fs.readFileSync (path.join (remote.app.getPath('userData'), 'dump.txt')));
      var workdump = JSON.parse (fs.readFileSync (path.join (remote.app.getPath('userData'), 'workdump.txt')));
      workdump.works.reverse ();
      console.log (vardump);
      console.log (workdump);
      global.readworkdump (vardump, workdump);
  });

  unzipper.extract({
      path: remote.app.getPath('userData'),
      filter: function (file) {
          return file.type !== "SymbolicLink";
      }
  });
}

global.readworkdump = function  (vardump, workdump)
{
  /*var idtrwd = 0;
  var tamanhorwd = workdump.works.length;

  for (per in workdump.works)
  {
      db.recordings.update({ performance_id: workdump.works[per].performance_id }, workdump.works[per], { upsert: true }, function (err, newDoc)
      {
        idtrwd++;

        if (idtrwd == tamanhorwd)
        {
          console.log ('importou gravacoes');
          global.albumlist (0,'',false,true);
          global.readwcdump (vardump);
        }
      });
  }*/

  db.recordings.insert (workdump.works, function (err, newDoc)
  {
    console.log ('importou gravacoes');
    global.albumlist (0,'',false,true);
    global.readwcdump (vardump);
  });
}

global.readwcdump = function (vardump)
{
  db.works.update({ composer_id: { $exists: true } }, { $set: { composer_favorite: false, composer_forbidden: false } }, { multi: true }, function (err)
  {
    db.works.update({ composer_id: { $in: vardump.composers.favorite} }, { $set: { composer_favorite: true } }, { multi: true }, function (err)
    {
      db.works.update({ composer_id: { $in: vardump.composers.forbidden} }, { $set: { composer_forbidden: true } }, { multi: true }, function (err)
      {
        global.setforbcomp ();
        global.setfavcomp ();

        db.works.update({ work_id: { $exists: true } }, { $set: { work_favorite: false } }, { multi: true }, function (err)
        {
          db.works.update({ work_id: { $in: vardump.works.favorite } }, { $set: { work_favorite: true } }, { multi: true }, function (err)
          {
            global.setfavworks ();
            global.composers ('all');
            global.genres (localStorage.lastcomposerid, localStorage.lastcomposername, localStorage.lastgenre);
            global.readstatsdump (vardump);
          });
        });
      });
    });
  });
}

global.readstatsdump = function (vardump)
{
  db.stats.insert(vardump.stats, function (err, numReplaced)
  {
    global.readstats ();
    console.log ('dump finalizado');
    global.cleanrecordings ();
  });
}

global.cleanrecordings = function ()
{
  var idsids = [];
  db.recordings.find ({ performance_id: {$exists: true} }, { performance_id: 1 }, function (err, docs)
  {
    console.log (docs.length + ' performances na base');
    var allids = docs.map(function(item){ return item.performance_id });

    for (p in allids)
    {
      if (allids.lastIndexOf(allids[p]) == p && allids.indexOf(allids[p]) != -1)
      {
        idsids.push(docs[allids.lastIndexOf(allids[p])]._id);
      }
    }

    db.recordings.remove ({ _id: { $nin: idsids} }, { multi: true }, function (err, numRemoved)
    {
        console.log (numRemoved + ' performances repetidas apagadas');
    });
  });
}
